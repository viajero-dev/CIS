/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.vg.scfc.financing.cis.ui.reusable;

import com.vg.scfc.financing.cis.ent.Identification;
import com.vg.scfc.financing.cis.ui.controller.IdentificationController;
import com.vg.scfc.financing.cis.ui.settings.UISetting;
import com.vg.scfc.financing.cis.ui.validator.ProcessValidator;
import com.vg.scfc.financing.cis.ui.validator.UIValidator;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.text.ParseException;

/**
 *
 * @author rodel
 */
public class RidersToBuyerPanel extends javax.swing.JPanel implements KeyListener {

    /**
     * Creates new form RidersToBuyerPanel
     */
    public RidersToBuyerPanel() {
        initComponents();
        initKeyListeners();
        policySetting();
    }

    public final void policySetting() {
        UISetting.policy.addIndexedComponent(txtCompetent);
        UISetting.policy.addIndexedComponent(txtIdNo);
        UISetting.policy.addIndexedComponent(txtPlaceOfIssue);
        UISetting.policy.addIndexedComponent(txtIssueDate);
    }

    private void initKeyListeners() {
        txtCompetent.addKeyListener(this);
        txtIdNo.addKeyListener(this);
        txtPlaceOfIssue.addKeyListener(this);
        txtIssueDate.addKeyListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        txtCompetent = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtPlaceOfIssue = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        try {
            txtIssueDate = new com.vg.commons.formattedfields.FormattedSimpleDateField();
        } catch (java.text.ParseException e1) {
            e1.printStackTrace();
        }
        txtIdNo = new javax.swing.JTextField();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel3.setText("Competent Evidence of Identity:");
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 10, 210, -1));

        txtCompetent.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCompetentFocusLost(evt);
            }
        });
        add(txtCompetent, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 5, 260, -1));

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel4.setText("ID No.");
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 35, 80, -1));

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel5.setText("Place of Issue:");
        jLabel5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 60, 170, -1));

        txtPlaceOfIssue.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPlaceOfIssueFocusLost(evt);
            }
        });
        add(txtPlaceOfIssue, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 55, 260, -1));

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel6.setText("Date of Issue:");
        jLabel6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 85, 140, -1));
        add(txtIssueDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 80, 100, -1));

        txtIdNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtIdNoFocusLost(evt);
            }
        });
        add(txtIdNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 30, 260, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void txtIdNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtIdNoFocusLost
        txtIdNo.setText(txtIdNo.getText().toUpperCase());
    }//GEN-LAST:event_txtIdNoFocusLost

    private void txtPlaceOfIssueFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPlaceOfIssueFocusLost
        txtPlaceOfIssue.setText(txtPlaceOfIssue.getText().toUpperCase());
    }//GEN-LAST:event_txtPlaceOfIssueFocusLost

    private void txtCompetentFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCompetentFocusLost
        txtCompetent.setText(txtCompetent.getText().toUpperCase());
    }//GEN-LAST:event_txtCompetentFocusLost

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField txtCompetent;
    private javax.swing.JTextField txtIdNo;
    private com.vg.commons.formattedfields.FormattedSimpleDateField txtIssueDate;
    private javax.swing.JTextField txtPlaceOfIssue;
    // End of variables declaration//GEN-END:variables
    private Identification identification;
    private HeaderPanel headerPanel;
    private String personType;
    private AddEditButtonPanel buttonPanel;

    public void setButtonPanel(AddEditButtonPanel buttonPanel) {
        this.buttonPanel = buttonPanel;
    }

    public Identification getIdentification() {
        return identification;
    }

    public void setIdentification(Identification identification) {
        this.identification = identification;
        setRidersToBuyerValues(this.identification);
    }

    public void setHeaderPanel(HeaderPanel headerPanel) {
        this.headerPanel = headerPanel;
    }

    public void setPersonType(String personType) {
        this.personType = personType;
    }

    public void setFieldsEditable(boolean value) {
        txtCompetent.setEditable(value);
        txtIdNo.setEditable(value);
        txtPlaceOfIssue.setEditable(value);
        txtIssueDate.setEditable(value);

        txtCompetent.setFocusable(value);
        txtIdNo.setFocusable(value);
        txtPlaceOfIssue.setFocusable(value);
        txtIssueDate.setFocusable(value);

        if (value) {
            txtCompetent.requestFocus();
        }
    }

    public void resetToDefault() {
        txtCompetent.setText("");
        txtIdNo.setText("");
        txtIssueDate.setText("");
        txtPlaceOfIssue.setText("");
    }

    private Identification createNew(Identification i) {
        try {
            i.setDateOfIssue(txtIssueDate.getDate());
        } catch (ParseException ex) {
            UIValidator.log(ex, RidersToBuyerPanel.class);
        }
        i.setIdNo(txtIdNo.getText());
        i.setPlaceOfIssue(txtPlaceOfIssue.getText());
        i.setIssuedBy(txtCompetent.getText());
        return i;
    }

    public void setRidersToBuyerValues(Identification i) {
        if (i == null) {
            resetToDefault();
        } else {
            txtCompetent.setText(i.getIssuedBy());
            txtIdNo.setText(i.getIdNo());
            txtIssueDate.setDate(i.getDateOfIssue());
            txtPlaceOfIssue.setText(i.getPlaceOfIssue());
        }
    }

    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {
        switch (e.getKeyCode()) {
            case KeyEvent.VK_ENTER:
                if (txtCompetent.isFocusOwner()) {
                txtIdNo.requestFocus();
            } else if (txtIdNo.isFocusOwner()) {
                txtPlaceOfIssue.requestFocus();
            } else if (txtPlaceOfIssue.isFocusOwner()) {
                txtIssueDate.requestFocus();
            } else if (txtIssueDate.isFocusOwner()) {
                if (buttonPanel.getBtnAdd().getText().equals("Save")) {
                    buttonPanel.getBtnAdd().requestFocus();
                } else {
                    buttonPanel.getBtnEdit().requestFocus();
                }
            }
                break;
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
        switch (e.getKeyCode()) {
            case KeyEvent.VK_ENTER:
                if (txtCompetent.isFocusOwner()) {
                txtIdNo.requestFocus();
            } else if (txtIdNo.isFocusOwner()) {
                txtPlaceOfIssue.requestFocus();
            } else if (txtPlaceOfIssue.isFocusOwner()) {
                txtIssueDate.requestFocus();
            } else if (txtIssueDate.isFocusOwner()) {
                if (buttonPanel.getBtnAdd().getText().equals("Save")) {
                    buttonPanel.getBtnAdd().requestFocus();
                } else {
                    buttonPanel.getBtnEdit().requestFocus();
                }
            }
                break;
        }
    }

    public int saveAgreement() {
//        Identification i = IdentificationController.getInstance().save(headerPanel.getFormNo(), personType, createNew(new Identification()));
        Identification i = createNew(new Identification());
        if (!validIdentification(i)) {
            return ProcessValidator.VALIDATE_ERROR;
        }
        i = IdentificationController.getInstance().save(headerPanel.getFormNo(), personType, i);
        setIdentification(i);
        return (i != null ? ProcessValidator.PROCESS_COMPLETED : ProcessValidator.PROCESS_FAILED);
    }

    public int updateAgreement() {
//        Identification i = IdentificationController.getInstance().update(headerPanel.getFormNo(), personType, createNew(identification));
        Identification i = createNew(identification);
        if (!validIdentification(i)) {
            return ProcessValidator.VALIDATE_ERROR;
        }
        i = IdentificationController.getInstance().update(headerPanel.getFormNo(), personType, i);
        setIdentification(i);
        return (i != null ? ProcessValidator.PROCESS_COMPLETED : ProcessValidator.PROCESS_FAILED);
    }

    public boolean validIdentification(Identification i) {
        if (i != null) {
            if (!UIValidator.validate(txtCompetent, "Competent Evidence of Identity is requried.")) {
                return false;
            }
            if (!UIValidator.validate(txtIdNo, "ID No. is required.")) {
                return false;
            }
            if (!UIValidator.validate(txtPlaceOfIssue, "Place of Issue is required.")) {
                return false;
            }
            if (!UIValidator.validate(txtIssueDate, "Issued Date is required.")) {
                return false;
            }
            return true;
        } else {
            return false;
        }
    }
}
