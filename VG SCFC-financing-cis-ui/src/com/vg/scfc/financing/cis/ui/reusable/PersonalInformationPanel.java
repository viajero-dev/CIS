/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.vg.scfc.financing.cis.ui.reusable;

import com.vg.scfc.financing.cis.ent.PersonalInfo;
import com.vg.scfc.financing.cis.ent.Religion;
import com.vg.scfc.financing.cis.ent.Tribe;
import com.vg.scfc.financing.cis.ui.controller.PersonalInfoController;
import com.vg.scfc.financing.cis.ui.validator.UIValidator;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.Date;
import java.util.List;

/**
 *
 * @author rodel
 */
public class PersonalInformationPanel extends javax.swing.JPanel implements KeyListener {

    /**
     * Creates new form PersonalInformationPanel
     */
    public PersonalInformationPanel() {
        initComponents();
        initGenderOption();
        initTextBoxListener();
        initComboBoxListener();
        initRadioButtonListener();
        initComboBoxValues();
        startUpSettings();
    }

    private void startUpSettings() {
        setFieldsEditable(false);
    }

    /**
     * Add Gender radio buttons to Button Group
     */
    private void initGenderOption() {
        optionGroupGender.add(optionMale);
        optionGroupGender.add(optionFemale);
    }

    /**
     * Add KeyListeners to all text boxes
     */
    private void initTextBoxListener() {
        txtLastName.addKeyListener(this);
        txtFirstName.addKeyListener(this);
        txtMiddleName.addKeyListener(this);
        txtBirthDate.addKeyListener(this);
        txtBirthPlace.addKeyListener(this);
        txtPreviousAddress.addKeyListener(this);
        txtContact.addKeyListener(this);
        txtContact.addKeyListener(this);
        txtPreviousAddress.addKeyListener(this);
        txtPresentAddress.addKeyListener(this);
        txtAge.addKeyListener(this);
    }

    /**
     * Add Key Listeners to all combo box
     */
    private void initComboBoxListener() {
        comboTribe.addKeyListener(this);
        comboReligion.addKeyListener(this);
        comboCitizenship.addKeyListener(this);
        comboStatus.addKeyListener(this);
        comboMarriedOption.addKeyListener(this);
        comboEducationStatus.addKeyListener(this);
    }

    /**
     * Add Key Listener to all radio buttons
     */
    private void initRadioButtonListener() {
        optionMale.addKeyListener(this);
        optionFemale.addKeyListener(this);
    }

    /**
     * Set all Combo Box values
     */
    private void initComboBoxValues() {
        List<Tribe> tribes = PersonalInfoController.getInstance().Tribes();
        List<Religion> religions = PersonalInfoController.getInstance().Religions();
        
        if (!tribes.isEmpty()) {
            comboTribe.removeAllItems();
            for (Tribe t : tribes) {
                comboTribe.addItem(t.getTribeDesc());
            }
        }
        if (!religions.isEmpty()) {
            comboReligion.removeAllItems();
            for (Religion r : religions) {
                comboReligion.addItem(r.getReligionDesc());
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        optionGroupGender = new javax.swing.ButtonGroup();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtLastName = new javax.swing.JTextField();
        jLabel100 = new javax.swing.JLabel();
        txtFirstName = new javax.swing.JTextField();
        jLabel101 = new javax.swing.JLabel();
        txtMiddleName = new javax.swing.JTextField();
        jLabel102 = new javax.swing.JLabel();
        txtBirthDate = new javax.swing.JTextField();
        jLabel103 = new javax.swing.JLabel();
        txtAge = new javax.swing.JTextField();
        jLabel104 = new javax.swing.JLabel();
        txtPreviousAddress = new javax.swing.JTextField();
        jLabel105 = new javax.swing.JLabel();
        optionMale = new javax.swing.JRadioButton();
        optionFemale = new javax.swing.JRadioButton();
        jLabel106 = new javax.swing.JLabel();
        comboTribe = new javax.swing.JComboBox();
        jLabel107 = new javax.swing.JLabel();
        comboReligion = new javax.swing.JComboBox();
        jLabel108 = new javax.swing.JLabel();
        comboCitizenship = new javax.swing.JComboBox();
        jLabel109 = new javax.swing.JLabel();
        comboStatus = new javax.swing.JComboBox();
        jLabel110 = new javax.swing.JLabel();
        comboMarriedOption = new javax.swing.JComboBox();
        comboEducationStatus = new javax.swing.JComboBox();
        jLabel113 = new javax.swing.JLabel();
        txtContact = new javax.swing.JTextField();
        jLabel114 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel115 = new javax.swing.JLabel();
        jLabel116 = new javax.swing.JLabel();
        txtBirthPlace = new javax.swing.JTextField();
        jLabel111 = new javax.swing.JLabel();
        txtPresentAddress = new javax.swing.JTextField();

        jPanel4.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel1.setText("Last name");
        jPanel4.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 10, -1, -1));

        txtLastName.setFont(new java.awt.Font("Monospaced", 0, 9)); // NOI18N
        txtLastName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtLastNameFocusLost(evt);
            }
        });
        jPanel4.add(txtLastName, new org.netbeans.lib.awtextra.AbsoluteConstraints(93, 5, 255, -1));

        jLabel100.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel100.setText("First name");
        jPanel4.add(jLabel100, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 35, -1, -1));

        txtFirstName.setFont(new java.awt.Font("Monospaced", 0, 9)); // NOI18N
        txtFirstName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFirstNameFocusLost(evt);
            }
        });
        jPanel4.add(txtFirstName, new org.netbeans.lib.awtextra.AbsoluteConstraints(93, 30, 255, -1));

        jLabel101.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel101.setText("Middle name");
        jPanel4.add(jLabel101, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 60, -1, -1));

        txtMiddleName.setFont(new java.awt.Font("Monospaced", 0, 9)); // NOI18N
        txtMiddleName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMiddleNameActionPerformed(evt);
            }
        });
        jPanel4.add(txtMiddleName, new org.netbeans.lib.awtextra.AbsoluteConstraints(93, 55, 255, -1));

        jLabel102.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel102.setText("Birthdate");
        jPanel4.add(jLabel102, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 85, -1, -1));

        txtBirthDate.setFont(new java.awt.Font("Monospaced", 0, 9)); // NOI18N
        txtBirthDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBirthDateActionPerformed(evt);
            }
        });
        jPanel4.add(txtBirthDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(93, 80, 120, -1));

        jLabel103.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel103.setText("Age");
        jPanel4.add(jLabel103, new org.netbeans.lib.awtextra.AbsoluteConstraints(225, 85, -1, -1));

        txtAge.setEditable(false);
        txtAge.setFont(new java.awt.Font("Monospaced", 0, 9)); // NOI18N
        jPanel4.add(txtAge, new org.netbeans.lib.awtextra.AbsoluteConstraints(265, 80, 83, -1));

        jLabel104.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel104.setText("Previous Address");
        jPanel4.add(jLabel104, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 161, -1, -1));

        txtPreviousAddress.setFont(new java.awt.Font("Monospaced", 0, 9)); // NOI18N
        txtPreviousAddress.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPreviousAddressFocusLost(evt);
            }
        });
        jPanel4.add(txtPreviousAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 156, 710, -1));

        jLabel105.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel105.setText("Gender");
        jPanel4.add(jLabel105, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 10, -1, -1));

        optionMale.setFont(new java.awt.Font("Monospaced", 0, 9)); // NOI18N
        optionMale.setSelected(true);
        optionMale.setText("Male");
        optionMale.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                optionMaleItemStateChanged(evt);
            }
        });
        jPanel4.add(optionMale, new org.netbeans.lib.awtextra.AbsoluteConstraints(455, 5, -1, -1));

        optionFemale.setFont(new java.awt.Font("Monospaced", 0, 9)); // NOI18N
        optionFemale.setText("Female");
        optionFemale.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                optionFemaleItemStateChanged(evt);
            }
        });
        jPanel4.add(optionFemale, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 5, -1, -1));

        jLabel106.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel106.setText("Tribe");
        jPanel4.add(jLabel106, new org.netbeans.lib.awtextra.AbsoluteConstraints(625, 35, -1, -1));

        comboTribe.setFont(new java.awt.Font("Monospaced", 0, 9)); // NOI18N
        jPanel4.add(comboTribe, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 30, 144, -1));

        jLabel107.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel107.setText("Religion");
        jPanel4.add(jLabel107, new org.netbeans.lib.awtextra.AbsoluteConstraints(625, 60, -1, -1));

        comboReligion.setFont(new java.awt.Font("Monospaced", 0, 9)); // NOI18N
        jPanel4.add(comboReligion, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 55, 144, -1));

        jLabel108.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel108.setText("Citizenship");
        jPanel4.add(jLabel108, new org.netbeans.lib.awtextra.AbsoluteConstraints(625, 85, -1, -1));

        comboCitizenship.setFont(new java.awt.Font("Monospaced", 0, 9)); // NOI18N
        jPanel4.add(comboCitizenship, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 80, 144, -1));

        jLabel109.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel109.setText("Status");
        jPanel4.add(jLabel109, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 60, -1, -1));

        comboStatus.setFont(new java.awt.Font("Monospaced", 0, 9)); // NOI18N
        comboStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Single", "Married" }));
        comboStatus.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                comboStatusFocusLost(evt);
            }
        });
        jPanel4.add(comboStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(455, 55, 144, -1));

        jLabel110.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel110.setText("If Married");
        jPanel4.add(jLabel110, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 85, -1, -1));

        comboMarriedOption.setFont(new java.awt.Font("Monospaced", 0, 9)); // NOI18N
        comboMarriedOption.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Living Together", "Widower", "Legally Seperated", "Mutually Seperated", " " }));
        comboMarriedOption.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboMarriedOptionItemStateChanged(evt);
            }
        });
        jPanel4.add(comboMarriedOption, new org.netbeans.lib.awtextra.AbsoluteConstraints(455, 80, 144, -1));

        comboEducationStatus.setFont(new java.awt.Font("Monospaced", 0, 9)); // NOI18N
        comboEducationStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Elementary", "High School", "Some College", "College Graduate" }));
        comboEducationStatus.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboEducationStatusItemStateChanged(evt);
            }
        });
        jPanel4.add(comboEducationStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 5, 144, -1));

        jLabel113.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel113.setText("Contact");
        jPanel4.add(jLabel113, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 35, -1, -1));

        txtContact.setFont(new java.awt.Font("Monospaced", 0, 9)); // NOI18N
        txtContact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtContactActionPerformed(evt);
            }
        });
        jPanel4.add(txtContact, new org.netbeans.lib.awtextra.AbsoluteConstraints(455, 30, 144, -1));

        jLabel114.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel114.setText("Education");
        jPanel4.add(jLabel114, new org.netbeans.lib.awtextra.AbsoluteConstraints(625, 10, -1, -1));

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel115.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        jLabel115.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel115.setText("Image");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel115, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jLabel115)
                .addContainerGap(57, Short.MAX_VALUE))
        );

        jPanel4.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(845, 5, 150, 130));

        jLabel116.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel116.setText("Present Address");
        jPanel4.add(jLabel116, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 136, -1, -1));

        txtBirthPlace.setFont(new java.awt.Font("Monospaced", 0, 9)); // NOI18N
        txtBirthPlace.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBirthPlaceFocusLost(evt);
            }
        });
        jPanel4.add(txtBirthPlace, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 105, 710, -1));

        jLabel111.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel111.setText("Birth Place");
        jPanel4.add(jLabel111, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 110, -1, -1));

        txtPresentAddress.setFont(new java.awt.Font("Monospaced", 0, 9)); // NOI18N
        txtPresentAddress.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPresentAddressFocusLost(evt);
            }
        });
        jPanel4.add(txtPresentAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 131, 710, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 1017, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void comboStatusFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_comboStatusFocusLost
        if (comboStatus.getSelectedIndex() == 1) {
            comboMarriedOption.setEnabled(true);
        } else {
            comboMarriedOption.setEnabled(false);
            civilStatus = "SINGLE";
        }
    }//GEN-LAST:event_comboStatusFocusLost

    private void txtLastNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLastNameFocusLost
        lastname = UIValidator.validate(txtLastName);
    }//GEN-LAST:event_txtLastNameFocusLost

    private void txtFirstNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFirstNameFocusLost
        firstname = UIValidator.validate(txtFirstName);
    }//GEN-LAST:event_txtFirstNameFocusLost

    private void txtMiddleNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMiddleNameActionPerformed
        middlename = UIValidator.validate(txtMiddleName);
    }//GEN-LAST:event_txtMiddleNameActionPerformed

    private void txtBirthDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBirthDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBirthDateActionPerformed

    private void optionMaleItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_optionMaleItemStateChanged
        if (optionMale.isSelected()) {
            gender = "MALE";
        }
    }//GEN-LAST:event_optionMaleItemStateChanged

    private void optionFemaleItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_optionFemaleItemStateChanged
        if (optionFemale.isSelected()) {
            gender = "FEMALE";
        }
    }//GEN-LAST:event_optionFemaleItemStateChanged

    private void txtContactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtContactActionPerformed
        contact = UIValidator.isNumeric(txtContact);
    }//GEN-LAST:event_txtContactActionPerformed

    private void comboMarriedOptionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboMarriedOptionItemStateChanged
        if (comboMarriedOption.isEnabled()) {
            switch (comboMarriedOption.getSelectedIndex()) {
                case 0:
                    civilStatus = "LIVING TOGETHER";
                    break;
                case 1:
                    civilStatus = "WIDOWER";
                    break;
                case 2:
                    civilStatus = "LEGALLY SEPERATED";
                    break;
                case 3:
                    civilStatus = "MUTUALLY SEPERATED";
                    break;
            }
        }
    }//GEN-LAST:event_comboMarriedOptionItemStateChanged

    private void comboEducationStatusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboEducationStatusItemStateChanged
        switch (comboEducationStatus.getSelectedIndex()) {
            case 0:
                educationalAttainment = "ELEMENTARY";
                break;
            case 1:
                educationalAttainment = "HIGH SCHOOL";
                break;
            case 2:
                educationalAttainment = "SOME COLLEGE";
                break;
            case 3:
                educationalAttainment = "COLLEGE GRADUATE";
                break;
        }
    }//GEN-LAST:event_comboEducationStatusItemStateChanged

    private void txtBirthPlaceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBirthPlaceFocusLost
        birthPlace = UIValidator.validate(txtBirthPlace);
    }//GEN-LAST:event_txtBirthPlaceFocusLost

    private void txtPresentAddressFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPresentAddressFocusLost
        presentAddress = UIValidator.validate(txtPresentAddress);
    }//GEN-LAST:event_txtPresentAddressFocusLost

    private void txtPreviousAddressFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPreviousAddressFocusLost
        previousAddress = UIValidator.validate(txtPreviousAddress);
    }//GEN-LAST:event_txtPreviousAddressFocusLost

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox comboCitizenship;
    private javax.swing.JComboBox comboEducationStatus;
    private javax.swing.JComboBox comboMarriedOption;
    private javax.swing.JComboBox comboReligion;
    private javax.swing.JComboBox comboStatus;
    private javax.swing.JComboBox comboTribe;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel100;
    private javax.swing.JLabel jLabel101;
    private javax.swing.JLabel jLabel102;
    private javax.swing.JLabel jLabel103;
    private javax.swing.JLabel jLabel104;
    private javax.swing.JLabel jLabel105;
    private javax.swing.JLabel jLabel106;
    private javax.swing.JLabel jLabel107;
    private javax.swing.JLabel jLabel108;
    private javax.swing.JLabel jLabel109;
    private javax.swing.JLabel jLabel110;
    private javax.swing.JLabel jLabel111;
    private javax.swing.JLabel jLabel113;
    private javax.swing.JLabel jLabel114;
    private javax.swing.JLabel jLabel115;
    private javax.swing.JLabel jLabel116;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JRadioButton optionFemale;
    private javax.swing.ButtonGroup optionGroupGender;
    private javax.swing.JRadioButton optionMale;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtBirthDate;
    private javax.swing.JTextField txtBirthPlace;
    private javax.swing.JTextField txtContact;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtMiddleName;
    private javax.swing.JTextField txtPresentAddress;
    private javax.swing.JTextField txtPreviousAddress;
    // End of variables declaration//GEN-END:variables
    private String lastname;
    private String firstname;
    private String middlename;
    private Date birthDate;
    private int age;
    private String birthPlace;
    private String gender;
    private String contact;
    private String civilStatus;
    private String educationalAttainment;
    private String tribe;
    private String religion;
    private String citizenship;
    private String presentAddress;
    private String previousAddress;
    private String formSeries;
    private Date applicationDate;

    public void setFormSeries(String formSeries) {
        this.formSeries = formSeries;
    }

    public void setApplicationDate(Date applicationDate) {
        this.applicationDate = applicationDate;
    }

    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {
    }

    @Override
    public void keyReleased(KeyEvent e) {
        switch (e.getKeyCode()) {
            case KeyEvent.VK_ENTER:
                if (txtLastName.isFocusOwner()) {
                txtFirstName.requestFocus();
            } else if (txtFirstName.isFocusOwner()) {
                txtMiddleName.requestFocus();
            } else if (txtMiddleName.isFocusOwner()) {
                txtBirthDate.requestFocus();
            } else if (txtBirthDate.isFocusOwner()) {
                txtBirthPlace.requestFocus();
            } else if (txtBirthPlace.isFocusOwner()) {
                optionMale.requestFocus();
            } else if (optionMale.isFocusOwner()) {
                optionFemale.requestFocus();
            } else if (optionFemale.isFocusOwner()) {
                txtContact.requestFocus();
            } else if (txtContact.isFocusOwner()) {
                comboStatus.requestFocus();
            } else if (comboStatus.isFocusOwner()) {
                if (comboStatus.getSelectedIndex() == 1) {
                    comboMarriedOption.requestFocus();
                } else {
                    comboEducationStatus.requestFocus();
                }
            } else if (comboMarriedOption.isFocusOwner()) {
                comboEducationStatus.requestFocus();
            } else if (comboEducationStatus.isFocusOwner()) {
                comboTribe.requestFocus();
            } else if (comboTribe.isFocusOwner()) {
                comboReligion.requestFocus();
            } else if (comboReligion.isFocusOwner()) {
                comboCitizenship.requestFocus();
            } else if (comboCitizenship.isFocusOwner()) {
                txtPresentAddress.requestFocus();
            } else if (txtPresentAddress.isFocusOwner()) {
                txtPreviousAddress.requestFocus();
            }
                break;
            case KeyEvent.VK_UP:
                if (txtPreviousAddress.isFocusOwner()) {
                txtPresentAddress.requestFocus();
            } else if (txtPresentAddress.isFocusOwner()) {
                comboCitizenship.requestFocus();
            } else if (comboCitizenship.isFocusOwner()) {
                comboReligion.requestFocus();
            } else if (comboReligion.isFocusOwner()) {
                comboTribe.requestFocus();
            } else if (comboTribe.isFocusOwner()) {
                comboEducationStatus.requestFocus();
            } else if (comboEducationStatus.isFocusOwner()) {
                if (comboMarriedOption.isEnabled()) {
                    comboMarriedOption.requestFocus();
                } else {
                    comboStatus.requestFocus();
                }
            } else if (comboMarriedOption.isFocusOwner()) {
                comboStatus.requestFocus();
            } else if (comboStatus.isFocusOwner()) {
                txtContact.requestFocus();
            } else if (txtContact.isFocusOwner()) {
                optionFemale.requestFocus();
            } else if (optionFemale.isFocusOwner()) {
                optionMale.requestFocus();
            } else if (optionMale.isFocusOwner()) {
                txtBirthPlace.requestFocus();
            } else if (txtBirthPlace.isFocusOwner()) {
                txtBirthDate.requestFocus();
            } else if (txtBirthDate.isFocusOwner()) {
                txtMiddleName.requestFocus();
            } else if (txtMiddleName.isFocusOwner()) {
                txtFirstName.requestFocus();
            } else if (txtFirstName.isFocusOwner()) {
                txtLastName.requestFocus();
            }
                break;
        }
    }

    public void setFieldsEditable(boolean value) {
        txtLastName.setEditable(value);
        txtFirstName.setEditable(value);
        txtMiddleName.setEditable(value);
        txtBirthDate.setEditable(value);
        txtBirthPlace.setEditable(value);
        optionMale.setEnabled(value);
        optionFemale.setEnabled(value);
        txtContact.setEditable(value);
        comboStatus.setEditable(value);
        comboMarriedOption.setEditable(value);
        comboEducationStatus.setEditable(value);
        comboTribe.setEditable(value);
        comboReligion.setEditable(value);
        comboCitizenship.setEditable(value);
        txtPresentAddress.setEditable(value);
        txtPreviousAddress.setEditable(value);

        txtLastName.requestFocus();
    }

    public void resetToDefault() {
        txtLastName.setText("");
        txtFirstName.setText("");
        txtMiddleName.setText("");
        txtBirthDate.setText("");
        txtBirthPlace.setText("");
        optionMale.setSelected(true);
        optionFemale.setText("");
        txtContact.setText("");
        comboStatus.setSelectedIndex(0);
        comboMarriedOption.setSelectedIndex(0);
        comboEducationStatus.setSelectedIndex(0);
        comboTribe.setSelectedIndex(0);
        comboReligion.setSelectedIndex(0);
        comboCitizenship.setSelectedIndex(0);
        txtPresentAddress.setText("");
        txtPreviousAddress.setText("");
    }

    public void setPersonalInfo(Object o) {
        if (o == null) {
            resetToDefault();
        } else {
            //TODO, set personal info values from object pass
            PersonalInfo p = (PersonalInfo) o;
            txtLastName.setText(p.getLastName());
            txtFirstName.setText(p.getFirstName());
            txtMiddleName.setText(p.getMiddleName());
            txtBirthDate.setText(p.getDateOfBirth().toString());
            txtBirthPlace.setText(p.getPlaceOfBirth());
            switch (p.getGender().toUpperCase()) {
                case "MALE":
                    optionMale.setSelected(true);
                    optionFemale.setSelected(false);
                    break;
                case "FEMALE":
                    optionMale.setSelected(false);
                    optionFemale.setSelected(true);
                    break;
            }
//            txtContact.setText(p.get);            
            switch (p.getCivilStatus()) {
                case "SINGLE":
                    comboStatus.setSelectedIndex(0);
                    comboMarriedOption.setEnabled(false);
                    break;
                case "LIVING TOGETHER":
                    comboStatus.setSelectedIndex(1);
                    comboMarriedOption.setEnabled(true);
                    comboMarriedOption.setSelectedIndex(0);
                    break;
                case "WIDOWER":
                    comboStatus.setSelectedIndex(1);
                    comboMarriedOption.setEnabled(true);
                    comboMarriedOption.setSelectedIndex(1);
                    break;
                case "LEGALLY SEPERATED":
                    comboStatus.setSelectedIndex(1);
                    comboMarriedOption.setEnabled(true);
                    comboMarriedOption.setSelectedIndex(2);
                    break;
                case "MUTUALLY SEPERATED":
                    comboStatus.setSelectedIndex(1);
                    comboMarriedOption.setEnabled(true);
                    comboMarriedOption.setSelectedIndex(3);
                    break;
            }
            switch (p.getEducation()) {
                case "ELEMENTARY":
                    comboEducationStatus.setSelectedIndex(0);
                    break;
                case "HIGH SCHOOL":
                    comboEducationStatus.setSelectedIndex(1);
                    break;
                case "SOME COLLEGE":
                    comboEducationStatus.setSelectedIndex(2);
                    break;
                case "COLLEGE GRADUATE":
                    comboEducationStatus.setSelectedIndex(3);
                    break;
            }
//            comboTribe.setSelectedIndex(0);
//            comboReligion.setSelectedIndex(0);
//            comboCitizenship.setSelectedIndex(0);
//            txtPresentAddress.setText(p.get);
//            txtPreviousAddress.setText("");
        }
    }

    public boolean savePersonalInfo() {
        Object o = PersonalInfoController.getInstance().createNew(lastname, firstname, middlename, birthDate,
                birthPlace, age, gender, tribe, religion, citizenship, civilStatus, educationalAttainment, contact,
                presentAddress, previousAddress, formSeries, applicationDate);
        setPersonalInfo(o);
        return o != null;
    }

    public boolean updatePersonalInfo() {
        Object o = PersonalInfoController.getInstance().update("", lastname, firstname, middlename, birthDate,
                birthPlace, age, gender, tribe, religion, citizenship, civilStatus, educationalAttainment, contact,
                presentAddress, previousAddress);
        setPersonalInfo(o);
        return o != null;
    }

}
