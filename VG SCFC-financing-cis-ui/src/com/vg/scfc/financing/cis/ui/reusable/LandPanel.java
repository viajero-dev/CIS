/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.vg.scfc.financing.cis.ui.reusable;

import com.vg.commons.util.NumberUtils;
import com.vg.scfc.financing.cis.ent.Land;
import com.vg.scfc.financing.cis.ui.controller.LandAssetController;
import com.vg.scfc.financing.cis.ui.validator.UIValidator;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author rodel
 */
public class LandPanel extends javax.swing.JPanel implements KeyListener {

    /**
     * Creates new form LandPanel
     */
    public LandPanel() {
        initComponents();
        initKeyListener();
        initResidentialOptions();
        startUpSettings();
    }

    private void startUpSettings() {
        setFieldsEditable(false);
    }

    /**
     * Setup OptionButton
     */
    private void initResidentialOptions() {
        optionResidentialGroup.add(optionHouse);
        optionResidentialGroup.add(optionConcrete);
        optionResidentialGroup.add(optionSemiConcrete);
        optionResidentialGroup.add(optionShanity);
        optionResidentialGroup.add(optionOthers);
    }

    /**
     * Set KeyListeners
     */
    private void initKeyListener() {
        checkAgricultural.addKeyListener(this);
        checkCommercial.addKeyListener(this);
        checkResidential.addKeyListener(this);
        txtAreaAgri.addKeyListener(this);
        txtAreaCommercial.addKeyListener(this);
        txtAreaResidential.addKeyListener(this);
        txtLocationAgri.addKeyListener(this);
        txtLocationCommercial.addKeyListener(this);
        txtLocationResidential.addKeyListener(this);
        txtEstValueAgri.addKeyListener(this);
        txtEstValueCommercial.addKeyListener(this);
        txtEstValueResidential.addKeyListener(this);
        optionConcrete.addKeyListener(this);
        optionHouse.addKeyListener(this);
        optionOthers.addKeyListener(this);
        optionSemiConcrete.addKeyListener(this);
        optionShanity.addKeyListener(this);
        txtOtherDesc.addKeyListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        optionResidentialGroup = new javax.swing.ButtonGroup();
        checkAgricultural = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        txtAreaAgri = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtLocationAgri = new javax.swing.JTextField();
        checkCommercial = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        txtAreaCommercial = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtLocationCommercial = new javax.swing.JTextField();
        checkResidential = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        txtAreaResidential = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtLocationResidential = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        optionHouse = new javax.swing.JRadioButton();
        optionConcrete = new javax.swing.JRadioButton();
        optionSemiConcrete = new javax.swing.JRadioButton();
        optionShanity = new javax.swing.JRadioButton();
        optionOthers = new javax.swing.JRadioButton();
        txtOtherDesc = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtEstValueAgri = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtEstValueCommercial = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtEstValueResidential = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtTotalEstValue = new javax.swing.JTextField();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        checkAgricultural.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        checkAgricultural.setText("Agricultural Land");
        checkAgricultural.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkAgriculturalItemStateChanged(evt);
            }
        });
        add(checkAgricultural, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 5, -1, -1));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel1.setText("Area");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 10, -1, -1));

        txtAreaAgri.setFont(new java.awt.Font("Monospaced", 0, 9)); // NOI18N
        txtAreaAgri.setEnabled(false);
        txtAreaAgri.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAreaAgriFocusLost(evt);
            }
        });
        add(txtAreaAgri, new org.netbeans.lib.awtextra.AbsoluteConstraints(215, 5, 85, -1));

        jLabel2.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel2.setText("Location");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 10, -1, -1));

        txtLocationAgri.setFont(new java.awt.Font("Monospaced", 0, 9)); // NOI18N
        txtLocationAgri.setEnabled(false);
        txtLocationAgri.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtLocationAgriFocusLost(evt);
            }
        });
        add(txtLocationAgri, new org.netbeans.lib.awtextra.AbsoluteConstraints(425, 5, 85, -1));

        checkCommercial.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        checkCommercial.setText("Commercial Land");
        checkCommercial.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkCommercialItemStateChanged(evt);
            }
        });
        add(checkCommercial, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 35, -1, -1));

        jLabel3.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel3.setText("Area");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 40, -1, -1));

        txtAreaCommercial.setFont(new java.awt.Font("Monospaced", 0, 9)); // NOI18N
        txtAreaCommercial.setEnabled(false);
        txtAreaCommercial.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAreaCommercialFocusLost(evt);
            }
        });
        add(txtAreaCommercial, new org.netbeans.lib.awtextra.AbsoluteConstraints(215, 35, 85, -1));

        jLabel4.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel4.setText("Location");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 40, -1, -1));

        txtLocationCommercial.setFont(new java.awt.Font("Monospaced", 0, 9)); // NOI18N
        txtLocationCommercial.setEnabled(false);
        txtLocationCommercial.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtLocationCommercialFocusLost(evt);
            }
        });
        add(txtLocationCommercial, new org.netbeans.lib.awtextra.AbsoluteConstraints(425, 35, 85, -1));

        checkResidential.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        checkResidential.setText("Residential Land");
        checkResidential.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkResidentialItemStateChanged(evt);
            }
        });
        add(checkResidential, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 65, -1, -1));

        jLabel5.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel5.setText("Area");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 70, -1, -1));

        txtAreaResidential.setFont(new java.awt.Font("Monospaced", 0, 9)); // NOI18N
        txtAreaResidential.setEnabled(false);
        txtAreaResidential.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAreaResidentialFocusLost(evt);
            }
        });
        add(txtAreaResidential, new org.netbeans.lib.awtextra.AbsoluteConstraints(215, 65, 85, -1));

        jLabel6.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel6.setText("Location");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 70, -1, -1));

        txtLocationResidential.setFont(new java.awt.Font("Monospaced", 0, 9)); // NOI18N
        txtLocationResidential.setEnabled(false);
        txtLocationResidential.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtLocationResidentialFocusLost(evt);
            }
        });
        add(txtLocationResidential, new org.netbeans.lib.awtextra.AbsoluteConstraints(425, 65, 85, -1));

        jLabel7.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel7.setText("-Ha");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(305, 10, -1, -1));

        jLabel8.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel8.setText("sq.m");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(305, 40, -1, -1));

        jLabel9.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel9.setText("sq.m");
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(305, 70, -1, -1));

        optionHouse.setFont(new java.awt.Font("Monospaced", 0, 9)); // NOI18N
        optionHouse.setText("House");
        optionHouse.setEnabled(false);
        optionHouse.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                optionHouseItemStateChanged(evt);
            }
        });
        add(optionHouse, new org.netbeans.lib.awtextra.AbsoluteConstraints(35, 95, -1, -1));

        optionConcrete.setFont(new java.awt.Font("Monospaced", 0, 9)); // NOI18N
        optionConcrete.setText("Concrete");
        optionConcrete.setEnabled(false);
        optionConcrete.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                optionConcreteItemStateChanged(evt);
            }
        });
        add(optionConcrete, new org.netbeans.lib.awtextra.AbsoluteConstraints(95, 95, -1, -1));

        optionSemiConcrete.setFont(new java.awt.Font("Monospaced", 0, 9)); // NOI18N
        optionSemiConcrete.setText("Semi Concrete");
        optionSemiConcrete.setEnabled(false);
        optionSemiConcrete.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                optionSemiConcreteItemStateChanged(evt);
            }
        });
        add(optionSemiConcrete, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 95, -1, -1));

        optionShanity.setFont(new java.awt.Font("Monospaced", 0, 9)); // NOI18N
        optionShanity.setText("Shanity");
        optionShanity.setEnabled(false);
        optionShanity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                optionShanityFocusLost(evt);
            }
        });
        add(optionShanity, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 95, -1, -1));

        optionOthers.setFont(new java.awt.Font("Monospaced", 0, 9)); // NOI18N
        optionOthers.setText("Others");
        optionOthers.setEnabled(false);
        optionOthers.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                optionOthersItemStateChanged(evt);
            }
        });
        add(optionOthers, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 95, -1, -1));

        txtOtherDesc.setFont(new java.awt.Font("Monospaced", 0, 9)); // NOI18N
        txtOtherDesc.setEnabled(false);
        txtOtherDesc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtOtherDescFocusLost(evt);
            }
        });
        add(txtOtherDesc, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 95, 110, -1));

        jLabel10.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel10.setText("Estimated value");
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 10, -1, -1));

        txtEstValueAgri.setFont(new java.awt.Font("Monospaced", 0, 9)); // NOI18N
        txtEstValueAgri.setEnabled(false);
        txtEstValueAgri.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEstValueAgriFocusLost(evt);
            }
        });
        add(txtEstValueAgri, new org.netbeans.lib.awtextra.AbsoluteConstraints(646, 5, 120, -1));

        jLabel11.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel11.setText("Estimated value");
        add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 70, -1, -1));

        txtEstValueCommercial.setFont(new java.awt.Font("Monospaced", 0, 9)); // NOI18N
        txtEstValueCommercial.setEnabled(false);
        txtEstValueCommercial.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEstValueCommercialFocusLost(evt);
            }
        });
        add(txtEstValueCommercial, new org.netbeans.lib.awtextra.AbsoluteConstraints(646, 35, 120, -1));

        jLabel12.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel12.setText("Estimated value");
        add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 40, -1, -1));

        txtEstValueResidential.setFont(new java.awt.Font("Monospaced", 0, 9)); // NOI18N
        txtEstValueResidential.setEnabled(false);
        txtEstValueResidential.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEstValueResidentialFocusLost(evt);
            }
        });
        add(txtEstValueResidential, new org.netbeans.lib.awtextra.AbsoluteConstraints(646, 65, 120, -1));

        jLabel13.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel13.setText("Total Estimated value");
        add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(521, 125, -1, -1));

        txtTotalEstValue.setEditable(false);
        txtTotalEstValue.setFont(new java.awt.Font("Monospaced", 0, 9)); // NOI18N
        add(txtTotalEstValue, new org.netbeans.lib.awtextra.AbsoluteConstraints(646, 120, 120, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void checkAgriculturalItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkAgriculturalItemStateChanged
        if (checkAgricultural.isSelected()) {
            txtAreaAgri.setEnabled(true);
            txtLocationAgri.setEnabled(true);
            txtEstValueAgri.setEnabled(true);
        } else {
            txtAreaAgri.setEnabled(false);
            txtLocationAgri.setEnabled(false);
            txtEstValueAgri.setEnabled(false);
        }
    }//GEN-LAST:event_checkAgriculturalItemStateChanged

    private void checkCommercialItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkCommercialItemStateChanged
        if (checkCommercial.isSelected()) {
            txtAreaCommercial.setEnabled(true);
            txtLocationCommercial.setEnabled(true);
            txtEstValueCommercial.setEnabled(true);
        } else {
            txtAreaCommercial.setEnabled(false);
            txtLocationCommercial.setEnabled(false);
            txtEstValueCommercial.setEnabled(false);
        }
    }//GEN-LAST:event_checkCommercialItemStateChanged

    private void checkResidentialItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkResidentialItemStateChanged
        if (checkResidential.isSelected()) {
            txtAreaResidential.setEnabled(true);
            txtLocationResidential.setEnabled(true);
            txtEstValueResidential.setEnabled(true);
            optionConcrete.setEnabled(true);
            optionHouse.setEnabled(true);
            optionOthers.setEnabled(true);
            optionSemiConcrete.setEnabled(true);
            optionShanity.setEnabled(true);
        } else {
            txtAreaResidential.setEnabled(false);
            txtLocationResidential.setEnabled(false);
            txtEstValueResidential.setEnabled(false);
            optionConcrete.setEnabled(false);
            optionHouse.setEnabled(false);
            optionOthers.setEnabled(false);
            optionSemiConcrete.setEnabled(false);
            optionShanity.setEnabled(false);
        }
    }//GEN-LAST:event_checkResidentialItemStateChanged

    private void optionOthersItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_optionOthersItemStateChanged
        if (optionOthers.isSelected()) {
            txtOtherDesc.setEnabled(true);
        } else {
            txtOtherDesc.setEnabled(false);
        }
    }//GEN-LAST:event_optionOthersItemStateChanged

    private void txtAreaAgriFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAreaAgriFocusLost
        agriArea = new BigDecimal(UIValidator.isNumeric(txtAreaAgri));
    }//GEN-LAST:event_txtAreaAgriFocusLost

    private void txtLocationAgriFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLocationAgriFocusLost
        agriLocation = UIValidator.validate(txtLocationAgri);
    }//GEN-LAST:event_txtLocationAgriFocusLost

    private void txtEstValueAgriFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEstValueAgriFocusLost
        agriValue = new BigDecimal(UIValidator.isNumeric(txtEstValueAgri));
    }//GEN-LAST:event_txtEstValueAgriFocusLost

    private void txtAreaCommercialFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAreaCommercialFocusLost
        comArea = new BigDecimal(UIValidator.isNumeric(txtAreaCommercial));
    }//GEN-LAST:event_txtAreaCommercialFocusLost

    private void txtLocationCommercialFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLocationCommercialFocusLost
        comLocation = UIValidator.validate(txtLocationCommercial);
    }//GEN-LAST:event_txtLocationCommercialFocusLost

    private void txtEstValueCommercialFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEstValueCommercialFocusLost
        comValue = new BigDecimal(UIValidator.isNumeric(txtEstValueCommercial));
    }//GEN-LAST:event_txtEstValueCommercialFocusLost

    private void txtAreaResidentialFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAreaResidentialFocusLost
        resArea = new BigDecimal(UIValidator.isNumeric(txtAreaResidential));
    }//GEN-LAST:event_txtAreaResidentialFocusLost

    private void txtLocationResidentialFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLocationResidentialFocusLost
        resLocation = UIValidator.validate(txtLocationResidential);
    }//GEN-LAST:event_txtLocationResidentialFocusLost

    private void txtEstValueResidentialFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEstValueResidentialFocusLost
        resValue = new BigDecimal(UIValidator.isNumeric(txtEstValueResidential));
    }//GEN-LAST:event_txtEstValueResidentialFocusLost

    private void optionHouseItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_optionHouseItemStateChanged
        if (optionHouse.isSelected()) {
            additionalInfo = "HOUSE";
        }
    }//GEN-LAST:event_optionHouseItemStateChanged

    private void optionConcreteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_optionConcreteItemStateChanged
        if (optionConcrete.isSelected()) {
            additionalInfo = "CONCRETE";
        }
    }//GEN-LAST:event_optionConcreteItemStateChanged

    private void optionSemiConcreteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_optionSemiConcreteItemStateChanged
        if (optionSemiConcrete.isSelected()) {
            additionalInfo = "SEMI CONCRETE";
        }
    }//GEN-LAST:event_optionSemiConcreteItemStateChanged

    private void optionShanityFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_optionShanityFocusLost
        if (optionShanity.isSelected()) {
            additionalInfo = "SHANITY";
        }
    }//GEN-LAST:event_optionShanityFocusLost

    private void txtOtherDescFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtOtherDescFocusLost
        additionalInfo = UIValidator.validate(txtOtherDesc);
    }//GEN-LAST:event_txtOtherDescFocusLost

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkAgricultural;
    private javax.swing.JCheckBox checkCommercial;
    private javax.swing.JCheckBox checkResidential;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JRadioButton optionConcrete;
    private javax.swing.JRadioButton optionHouse;
    private javax.swing.JRadioButton optionOthers;
    private javax.swing.ButtonGroup optionResidentialGroup;
    private javax.swing.JRadioButton optionSemiConcrete;
    private javax.swing.JRadioButton optionShanity;
    private javax.swing.JTextField txtAreaAgri;
    private javax.swing.JTextField txtAreaCommercial;
    private javax.swing.JTextField txtAreaResidential;
    private javax.swing.JTextField txtEstValueAgri;
    private javax.swing.JTextField txtEstValueCommercial;
    private javax.swing.JTextField txtEstValueResidential;
    private javax.swing.JTextField txtLocationAgri;
    private javax.swing.JTextField txtLocationCommercial;
    private javax.swing.JTextField txtLocationResidential;
    private javax.swing.JTextField txtOtherDesc;
    private javax.swing.JTextField txtTotalEstValue;
    // End of variables declaration//GEN-END:variables
    private BigDecimal agriArea;
    private String agriLocation;
    private BigDecimal agriValue;
    private BigDecimal comArea;
    private String comLocation;
    private BigDecimal comValue;
    private BigDecimal resArea;
    private String resLocation;
    private BigDecimal resValue;
    private String additionalInfo;
    private List<Land> lands;
    private String formNo;
    private HeaderPanel headerPanel;

    public void setHeaderPanel(HeaderPanel headerPanel) {
        this.headerPanel = headerPanel;
    }

    public void setFormNo(String formNo) {
        this.formNo = formNo;
    }

    public List<Land> getLands() {
        if (lands == null) {
            lands = new ArrayList<>();
        }
        return lands;
    }

    public void setLands(List<Land> lands) {
        this.lands = lands;
        setLandAssets(this.lands);
    }

    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {
    }

    @Override
    public void keyReleased(KeyEvent e) {
        switch (e.getKeyCode()) {
            case KeyEvent.VK_ENTER:
                if (checkAgricultural.isFocusOwner()) {
                if (checkAgricultural.isSelected()) {
                    txtAreaAgri.requestFocus();
                } else {
                    checkCommercial.requestFocus();
                }
            } else if (txtAreaAgri.isFocusOwner()) {
                txtLocationAgri.requestFocus();
            } else if (txtLocationAgri.isFocusOwner()) {
                txtEstValueAgri.requestFocus();
            } else if (txtEstValueAgri.isFocusOwner()) {
                checkCommercial.requestFocus();
            } else if (checkCommercial.isFocusOwner()) {
                if (checkCommercial.isSelected()) {
                    txtAreaCommercial.requestFocus();
                } else {
                    checkResidential.requestFocus();
                }
            } else if (txtAreaCommercial.isFocusOwner()) {
                txtLocationCommercial.requestFocus();
            } else if (txtLocationCommercial.isFocusOwner()) {
                txtEstValueCommercial.requestFocus();
            } else if (txtEstValueCommercial.isFocusOwner()) {
                checkResidential.requestFocus();
            } else if (checkResidential.isFocusOwner()) {
                if (checkResidential.isSelected()) {
                    txtAreaResidential.requestFocus();
                }
            } else if (txtAreaResidential.isFocusOwner()) {
                txtLocationResidential.requestFocus();
            } else if (txtLocationResidential.isFocusOwner()) {
                optionHouse.requestFocus();
            } else if (optionHouse.isFocusOwner()) {
                optionConcrete.requestFocus();
            } else if (optionConcrete.isFocusOwner()) {
                optionSemiConcrete.requestFocus();
            } else if (optionSemiConcrete.isFocusOwner()) {
                optionShanity.requestFocus();
            } else if (optionShanity.isFocusOwner()) {
                optionOthers.requestFocus();
            } else if (optionOthers.isFocusOwner()) {
                if (optionOthers.isSelected()) {
                    txtOtherDesc.requestFocus();
                } else {
                    txtEstValueResidential.requestFocus();
                }
            } else if (txtOtherDesc.isFocusOwner()) {
                txtEstValueResidential.requestFocus();
            }
                break;
            case KeyEvent.VK_UP:
                if (txtEstValueResidential.isFocusOwner()) {
                if (txtOtherDesc.isEnabled()) {
                    txtOtherDesc.requestFocus();
                } else {
                    optionOthers.requestFocus();
                }
            } else if (txtOtherDesc.isFocusOwner()) {
                optionOthers.requestFocus();
            } else if (optionOthers.isFocusOwner()) {
                optionShanity.requestFocus();
            } else if (optionShanity.isFocusOwner()) {
                optionSemiConcrete.requestFocus();
            } else if (optionSemiConcrete.isFocusOwner()) {
                optionConcrete.requestFocus();
            } else if (optionConcrete.isFocusOwner()) {
                optionHouse.requestFocus();
            } else if (optionHouse.isFocusOwner()) {
                txtLocationResidential.requestFocus();
            } else if (txtLocationResidential.isFocusOwner()) {
                txtAreaResidential.requestFocus();
            } else if (txtAreaResidential.isFocusOwner()) {
                checkResidential.requestFocus();
            } else if (checkResidential.isFocusOwner()) {
                if (txtEstValueCommercial.isEnabled()) {
                    txtEstValueCommercial.requestFocus();
                } else {
                    checkCommercial.requestFocus();
                }
            } else if (txtEstValueCommercial.isFocusOwner()) {
                txtLocationCommercial.requestFocus();
            } else if (txtLocationCommercial.isFocusOwner()) {
                txtAreaCommercial.requestFocus();
            } else if (txtAreaCommercial.isFocusOwner()) {
                checkCommercial.requestFocus();
            } else if (checkCommercial.isFocusOwner()) {
                if (txtEstValueAgri.isEnabled()) {
                    txtEstValueAgri.requestFocus();
                } else {
                    checkAgricultural.requestFocus();
                }
            } else if (txtEstValueAgri.isFocusOwner()) {
                txtLocationAgri.requestFocus();
            } else if (txtLocationAgri.isFocusOwner()) {
                txtAreaAgri.requestFocus();
            } else if (txtAreaAgri.isFocusOwner()) {
                checkAgricultural.requestFocus();
            }
                break;
        }
    }

    public void setLandAssets(List<Land> l) {
        if (l.isEmpty()) {
            resetToDefault();
        } else {
            for (Land land : l) {
                switch (land.getLandType().getId()) {
                    case 1:
                        /* Agricultural */
                        checkAgricultural.setSelected(true);
                        txtAreaAgri.setText(NumberUtils.doubleToString(land.getArea()));
                        txtLocationAgri.setText(land.getAddress());
                        txtEstValueAgri.setText(NumberUtils.doubleToString(land.getAmount()));
                        break;
                    case 2:
                        /* Commercial */
                        checkCommercial.setSelected(true);
                        txtAreaCommercial.setText(NumberUtils.doubleToString(land.getArea()));
                        txtLocationCommercial.setText(land.getAddress());
                        txtEstValueResidential.setText(NumberUtils.doubleToString(land.getAmount()));
                        break;
                    case 3:
                        /* Residential */
                        checkResidential.setSelected(true);
                        txtAreaResidential.setText(NumberUtils.doubleToString(land.getArea()));
                        txtLocationResidential.setText(land.getAddress());
                        txtEstValueResidential.setText(NumberUtils.doubleToString(land.getAmount()));
                        switch (land.getAdditionalInfo()) {
                            case "HOUSE":
                                optionHouse.setSelected(true);
                                optionConcrete.setSelected(false);
                                optionSemiConcrete.setSelected(false);
                                optionShanity.setSelected(false);
                                optionOthers.setSelected(false);
                                txtOtherDesc.setEnabled(false);
                                break;
                            case "CONCRETE":
                                optionHouse.setSelected(false);
                                optionConcrete.setSelected(true);
                                optionSemiConcrete.setSelected(false);
                                optionShanity.setSelected(false);
                                optionOthers.setSelected(false);
                                txtOtherDesc.setEnabled(false);
                                break;
                            case "SEMI CONCRETE":
                                optionHouse.setSelected(false);
                                optionConcrete.setSelected(false);
                                optionSemiConcrete.setSelected(true);
                                optionShanity.setSelected(false);
                                optionOthers.setSelected(false);
                                txtOtherDesc.setEnabled(false);
                                break;
                            case "SHANITY":
                                optionHouse.setSelected(false);
                                optionConcrete.setSelected(false);
                                optionSemiConcrete.setSelected(false);
                                optionShanity.setSelected(true);
                                optionOthers.setSelected(false);
                                txtOtherDesc.setEnabled(false);
                                break;
                            default:
                                optionHouse.setSelected(false);
                                optionConcrete.setSelected(false);
                                optionSemiConcrete.setSelected(false);
                                optionShanity.setSelected(false);
                                optionOthers.setSelected(true);
                                txtOtherDesc.setText(land.getAdditionalInfo());
                                break;
                        }
                        break;
                }
            }
        }
    }

    public void setFieldsEditable(boolean value) {
        checkAgricultural.setEnabled(value);
        txtAreaAgri.setEditable(value);
        txtLocationAgri.setEditable(value);
        txtEstValueAgri.setEditable(value);
        checkCommercial.setEnabled(value);
        txtAreaCommercial.setEditable(value);
        txtLocationCommercial.setEditable(value);
        txtEstValueCommercial.setEditable(value);
        checkResidential.setEnabled(value);
        txtAreaResidential.setEditable(value);
        txtLocationCommercial.setEditable(value);
        txtEstValueResidential.setEditable(value);
        txtOtherDesc.setEditable(value);
    }

    public void resetToDefault() {
        checkAgricultural.setSelected(false);
        txtAreaAgri.setText("");
        txtLocationAgri.setText("");
        txtEstValueAgri.setText("");
        checkCommercial.setSelected(false);
        txtAreaCommercial.setText("");
        txtLocationCommercial.setText("");
        txtEstValueCommercial.setText("");
        checkResidential.setSelected(false);
        txtAreaResidential.setText("");
        txtLocationCommercial.setText("");
        txtEstValueResidential.setText("");
        txtOtherDesc.setText("");
    }

    public boolean saveLandAssets() {
        List<Land> l = LandAssetController.getInstance().createNew(createNew(new ArrayList<Land>()), headerPanel.getFormNo());
        setLands(l);
        return !l.isEmpty();
    }

    public boolean updateLandAssets() {
        List<Land> l = LandAssetController.getInstance().update(createNew(lands));
        setLands(l);
        return !l.isEmpty();
    }

    private List<Land> createNew(List<Land> lands) {
        if (lands.isEmpty()) {
            List<Land> results = new ArrayList<>();
            /* Agricultural Land */
            if (!txtAreaAgri.getText().equals("")) {
                Land agriLand = new Land();
                agriLand.setArea(new BigDecimal(UIValidator.MoneyCommaRemover(txtAreaAgri.getText())).doubleValue());
                agriLand.setAddress(txtLocationAgri.getText());
                agriLand.setAmount(new BigDecimal(UIValidator.MoneyCommaRemover(txtEstValueAgri.getText())).doubleValue());
                agriLand.setAdditionalInfo("");
                agriLand.setLandType(LandAssetController.getInstance().findLandTypeByID(1));
                results.add(agriLand);
            }

            /* Commercial Land */
            if (!txtAreaCommercial.getText().equals("")) {
                Land commLand = new Land();
                commLand.setArea(new BigDecimal(UIValidator.MoneyCommaRemover(txtAreaCommercial.getText())).doubleValue());
                commLand.setAddress(txtLocationCommercial.getText());
                commLand.setAmount(new BigDecimal(UIValidator.MoneyCommaRemover(txtEstValueCommercial.getText())).doubleValue());
                commLand.setAdditionalInfo("");
                commLand.setLandType(LandAssetController.getInstance().findLandTypeByID(2));
                results.add(commLand);
            }

            /* Residential Land */
            if (!txtAreaResidential.getText().equals("")) {
                Land resLand = new Land();
                resLand.setArea(new BigDecimal(UIValidator.MoneyCommaRemover(txtAreaResidential.getText())).doubleValue());
                resLand.setAddress(txtLocationResidential.getText());
                resLand.setAmount(new BigDecimal(UIValidator.MoneyCommaRemover(txtEstValueResidential.getText())).doubleValue());
                if (optionConcrete.isSelected()) {
                    resLand.setAdditionalInfo("CONCRETE");
                }
                if (optionHouse.isSelected()) {
                    resLand.setAdditionalInfo("HOUSE");
                }
                if (optionSemiConcrete.isSelected()) {
                    resLand.setAdditionalInfo("SEMI CONCRETE");
                }
                if (optionShanity.isSelected()) {
                    resLand.setAdditionalInfo("SHANITY");
                }
                if (optionOthers.isSelected()) {
                    resLand.setAdditionalInfo(txtOtherDesc.getText());
                }
                resLand.setLandType(LandAssetController.getInstance().findLandTypeByID(3));
                results.add(resLand);
            }
            return results;
        } else {
            for (Land land : lands) {
                switch (land.getLandType().getId()) {
                    case 1:
                        if (checkAgricultural.isSelected()) {
                        land.setArea(new BigDecimal(UIValidator.MoneyCommaRemover(txtAreaAgri.getText())).doubleValue());
                        land.setAddress(txtLocationAgri.getText());
                        land.setAmount(new BigDecimal(UIValidator.MoneyCommaRemover(txtEstValueAgri.getText())).doubleValue());
                    } else {
                        land.setArea(0);
                        land.setAddress("");
                        land.setAmount(0);
                    }
                        break;
                    case 2:
                        if (checkCommercial.isSelected()) {
                        land.setArea(new BigDecimal(UIValidator.MoneyCommaRemover(txtAreaCommercial.getText())).doubleValue());
                        land.setAddress(txtLocationCommercial.getText());
                        land.setAmount(new BigDecimal(UIValidator.MoneyCommaRemover(txtEstValueAgri.getText())).doubleValue());
                    } else {
                        land.setArea(0);
                        land.setAddress("");
                        land.setAmount(0);
                    }
                        break;
                    case 3:
                        if (checkResidential.isSelected()) {
                        land.setArea(new BigDecimal(UIValidator.MoneyCommaRemover(txtAreaResidential.getText())).doubleValue());
                        land.setAddress(txtLocationResidential.getText());
                        if (optionConcrete.isSelected()) {
                            land.setAdditionalInfo("CONCRETE");
                        }
                        if (optionHouse.isSelected()) {
                            land.setAdditionalInfo("HOUSE");
                        }
                        if (optionSemiConcrete.isSelected()) {
                            land.setAdditionalInfo("SEMI CONCRETE");
                        }
                        if (optionShanity.isSelected()) {
                            land.setAdditionalInfo("SHANITY");
                        }
                        if (optionOthers.isSelected()) {
                            land.setAdditionalInfo(txtOtherDesc.getText());
                        }
                        land.setAmount(new BigDecimal(UIValidator.MoneyCommaRemover(txtEstValueResidential.getText())).doubleValue());
                    } else {
                        land.setArea(0);
                        land.setAddress("");
                        land.setAdditionalInfo("");
                        land.setAmount(0);
                    }
                        break;
                }
            }
            return lands;
        }
    }
}
