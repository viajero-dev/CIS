/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.vg.scfc.financing.cis.ui.reusable;

import com.vg.scfc.financing.cis.ui.listener.AddEditChangeListener;
import com.vg.scfc.financing.cis.ui.settings.UISetting;
import javax.swing.ImageIcon;
import javax.swing.JButton;

/**
 *
 * @author rodel
 */
public class AddEditChangeButtonPanel extends javax.swing.JPanel implements AddEditChangeListener {

    /**
     * Creates new form AddEditChange
     */
    public AddEditChangeButtonPanel() {
        initComponents();
        initActionState();
        initButtonAction();
        initIcons();
    }

    private void initButtonAction() {
        UISetting.registerEnterKeyboardAction(buttonAdd);
        UISetting.registerEnterKeyboardAction(buttonEdit);
        UISetting.registerEnterKeyboardAction(buttonChange);
    }

    private void initActionState() {
        actionState = ActionState.DEFAULT;
    }

    private void initIcons() {
        buttonAdd.setIcon(new ImageIcon("src/resources/icons/appIcon.png"));
        buttonEdit.setIcon(new ImageIcon("src/resources/icons/editIcon.png"));
        buttonChange.setIcon(new ImageIcon("src/resources/icons/changeIcon.png"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonAdd = new javax.swing.JButton();
        buttonEdit = new javax.swing.JButton();
        buttonChange = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        buttonAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/appIcon.png"))); // NOI18N
        buttonAdd.setText("Add");
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });
        add(buttonAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(1, 1, 100, -1));

        buttonEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/editIcon2.1.png"))); // NOI18N
        buttonEdit.setText("Edit");
        buttonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEditActionPerformed(evt);
            }
        });
        add(buttonEdit, new org.netbeans.lib.awtextra.AbsoluteConstraints(105, 1, 100, -1));

        buttonChange.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/icons/changeIcon.png"))); // NOI18N
        buttonChange.setText("Change");
        buttonChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonChangeActionPerformed(evt);
            }
        });
        add(buttonChange, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 1, 110, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed
        if (actionState == ActionState.DEFAULT) {
            onAdd();
        } else {
            switch (actionState) {
                case SAVE:
                    onCancelAdd();
                    resetActionStateToDefault();
                    break;
                case EDIT:
                    onSaveEdit();
                    resetActionStateToDefault();
                    break;
            }
        }
    }//GEN-LAST:event_buttonAddActionPerformed

    private void buttonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditActionPerformed
        if (actionState == ActionState.DEFAULT) {
            onEdit();
        } else {
            switch (actionState) {
                case SAVE:
                    onSaveAdd();
                    resetActionStateToDefault();
                    break;
                case EDIT:
                    onCancelEdit();
                    resetActionStateToDefault();
                    break;
                case CHANGE:
                    onCancelChange();
                    resetActionStateToDefault();
                    break;
            }
        }
    }//GEN-LAST:event_buttonEditActionPerformed

    private void buttonChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonChangeActionPerformed
        if (actionState == ActionState.DEFAULT) {
            onChange();
        } else {
            switch (actionState) {
                case CHANGE:
                    onSaveChange();
                    resetActionStateToDefault();
                    break;
                case EDIT:
                    onCancelEdit();
                    resetActionStateToDefault();
                    break;
            }
        }
    }//GEN-LAST:event_buttonChangeActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonChange;
    private javax.swing.JButton buttonEdit;
    // End of variables declaration//GEN-END:variables
    private AddEditChangeListener buttonListener;
    private ActionState actionState;

    public JButton getButtonAdd() {
        return buttonAdd;
    }

    public JButton getButtonChange() {
        return buttonChange;
    }

    public JButton getButtonEdit() {
        return buttonEdit;
    }

    public void setButtonListener(AddEditChangeListener buttonListener) {
        this.buttonListener = buttonListener;
    }

    @Override
    public void onAdd() {
        if (buttonAdd.getText().equals("Add")) {
            actionState = ActionState.SAVE;

            buttonAdd.setIcon(new ImageIcon("src/resources/icons/cancelIcon.png"));
            buttonEdit.setIcon(new ImageIcon("src/resources/icons/saveIcon.png"));

            buttonAdd.setText("Cancel");
            buttonEdit.setText("Save");
            buttonListener.onAdd();
            buttonChange.setEnabled(false);
        } else {
            resetActionStateToDefault();
        }
    }

    @Override
    public boolean onSaveAdd() {
        boolean isSaved = buttonListener.onSaveAdd();
        if (!isSaved) {
            onAdd();
        } else {
            initIcons();
        }
        return isSaved;
    }

    @Override
    public void onCancelAdd() {
        buttonListener.onCancelAdd();
        buttonChange.setEnabled(true);
        initIcons();
    }

    @Override
    public void onEdit() {
        if (buttonEdit.getText().equals("Edit")) {
            actionState = ActionState.EDIT;
            
            buttonAdd.setIcon(new ImageIcon("src/resources/icons/saveIcon.png"));
            buttonEdit.setIcon(new ImageIcon("src/resources/icons/cancelIcon.png"));
            
            buttonAdd.setText("Save");
            buttonEdit.setText("Cancel");
            buttonListener.onEdit();
            buttonChange.setEnabled(false);
        } else {
            resetActionStateToDefault();
        }
    }

    @Override
    public boolean onSaveEdit() {
        buttonChange.setEnabled(false);
        boolean isEdited = buttonListener.onSaveEdit();
        if (!isEdited) {
            onEdit();
        } else {
            initIcons();
        }
        return isEdited;
    }

    @Override
    public void onCancelEdit() {
        buttonListener.onCancelEdit();
        buttonChange.setEnabled(true);
        initIcons();
    }

    @Override
    public void onChange() {
        if (buttonChange.getText().equals("Change")) {
            actionState = ActionState.CHANGE;
            
            buttonChange.setIcon(new ImageIcon("src/resources/icons/saveIcon.png"));
            buttonEdit.setIcon(new ImageIcon("src/resources/icons/cancelIcon.png"));
            
            buttonChange.setText("Save");
            buttonEdit.setText("Cancel");
            buttonListener.onChange();
            buttonAdd.setEnabled(false);
        } else {
            resetActionStateToDefault();
        }
    }

    @Override
    public boolean onSaveChange() {
        buttonAdd.setEnabled(true);
        boolean isChanged = buttonListener.onSaveChange();
        if (!isChanged) {
            onChange();
        } else {
            initIcons();
        }
        return isChanged;
    }

    @Override
    public void onCancelChange() {
        buttonListener.onCancelChange();
        buttonAdd.setEnabled(true);
        initIcons();
    }

    private void resetActionStateToDefault() {
        actionState = ActionState.DEFAULT;
        buttonAdd.setText("Add");
        buttonEdit.setText("Edit");
        buttonChange.setText("Change");
        initIcons();
    }

    public void enableAdd(boolean value) {
        buttonAdd.setEnabled(value);
    }

    public void enableChange(boolean value) {
        buttonChange.setEnabled(value);
    }

    private enum ActionState {

        SAVE, EDIT, CHANGE, DEFAULT
    }
}
