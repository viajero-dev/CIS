/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.vg.scfc.financing.cis.ui.reusable;

import com.vg.commons.formattedfields.JTextFieldLimit;
import com.vg.scfc.financing.cis.ui.settings.UISetting;
import com.vg.scfc.financing.cis.ui.validator.UIValidator;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.text.ParseException;
import java.util.Date;
import javax.swing.JDialog;
import javax.swing.JOptionPane;

/**
 *
 * @author rodel
 */
public class ApplicationFormAndDatePanel extends javax.swing.JPanel implements KeyListener {

    /**
     * Creates new form ApplicationFormAndDatePanel
     */
    public ApplicationFormAndDatePanel() {
        initComponents();
        initKeyListener();
        UISetting.registerEnterKeyboardAction(btnFinish);
    }

    private void initKeyListener() {
        txtFormSeries.addKeyListener(this);
        txtAppDate.addKeyListener(this);
        txtFormSeries.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtFormSeries = new javax.swing.JTextField();
        try {
            txtAppDate = new com.vg.commons.formattedfields.FormattedSimpleDateField();
        } catch (java.text.ParseException e1) {
            e1.printStackTrace();
        }
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        btnFinish = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Form No");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 10, -1, -1));

        txtFormSeries.setDocument(new JTextFieldLimit(5));
        add(txtFormSeries, new org.netbeans.lib.awtextra.AbsoluteConstraints(124, 5, 152, -1));

        txtAppDate.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        add(txtAppDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(124, 30, 152, -1));

        jLabel2.setText("Application Date");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 35, -1, -1));
        add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 55, 290, 10));

        btnFinish.setText("OK");
        btnFinish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinishActionPerformed(evt);
            }
        });
        add(btnFinish, new org.netbeans.lib.awtextra.AbsoluteConstraints(195, 60, 80, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnFinishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinishActionPerformed
        if (validForm()) {
            dlg.setVisible(false);
        }
    }//GEN-LAST:event_btnFinishActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFinish;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSeparator jSeparator1;
    private com.vg.commons.formattedfields.FormattedSimpleDateField txtAppDate;
    private javax.swing.JTextField txtFormSeries;
    // End of variables declaration//GEN-END:variables
    private JDialog dlg;

    public void setDlg(JDialog dlg) {
        this.dlg = dlg;
    }

    public void onClosing() {
        int ask = JOptionPane.showConfirmDialog(dlg, "Cancel adding new customer?", "Cancel Add", JOptionPane.YES_NO_OPTION);
        if (ask == JOptionPane.YES_OPTION) {
            dlg.setVisible(false);
        }
    }

    public String getFormSeries() {
        return txtFormSeries.getText().trim();
    }

    public Date getApplicationDate() throws ParseException {
        return txtAppDate.getDate();
    }

    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {
    }

    @Override
    public void keyReleased(KeyEvent e) {
        switch (e.getKeyCode()) {
            case KeyEvent.VK_ENTER:
                if (txtFormSeries.isFocusOwner()) {
                txtFormSeries.setText(UIValidator.generateFormSeries(txtFormSeries.getText()));
                txtAppDate.requestFocus();
            } else if (txtAppDate.isFocusOwner()) {
                btnFinish.requestFocus();
            }
                break;
            case KeyEvent.VK_UP:
                if (txtAppDate.isFocusOwner()) {
                txtFormSeries.requestFocus();
            }
                break;
            case KeyEvent.VK_ESCAPE:
                onClosing();
                break;
        }
    }

    private boolean validForm() {
        if (!UIValidator.validate(txtFormSeries, "Form Series is required.")) {
            return false;
        }
        if (!UIValidator.validate(txtAppDate, "Application Date is required.")) {
            return false;
        }
        return true;
    }
}
