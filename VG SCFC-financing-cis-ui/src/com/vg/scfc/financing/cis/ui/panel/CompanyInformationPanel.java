/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.vg.scfc.financing.cis.ui.panel;

import com.vg.scfc.financing.cis.ent.Address;
import com.vg.scfc.financing.cis.ent.Company;
import com.vg.scfc.financing.cis.ent.Customer;
import com.vg.scfc.financing.cis.ent.TransactionForm;
import com.vg.scfc.financing.cis.ui.controller.AddressController;
import com.vg.scfc.financing.cis.ui.controller.CompanyController;
import com.vg.scfc.financing.cis.ui.controller.FormController;
import com.vg.scfc.financing.cis.ui.controller.SearchController;
import com.vg.scfc.financing.cis.ui.reusable.AddEditButtonPanel;
import com.vg.scfc.financing.cis.ui.reusable.HeaderPanel;
import com.vg.scfc.financing.cis.ui.settings.UISetting;
import com.vg.scfc.financing.cis.ui.validator.ProcessValidator;
import com.vg.scfc.financing.cis.ui.validator.UIValidator;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.text.ParseException;
import java.util.Date;
import java.util.List;
import javax.swing.JTextField;

/**
 *
 * @author rodel
 */
public class CompanyInformationPanel extends javax.swing.JPanel implements KeyListener {

    /**
     * Creates new form CompanyInformationPanel
     */
    public CompanyInformationPanel() {
        initComponents();
        initKeyListener();
        policySetting();
    }

    public final void policySetting() {
        UISetting.policy.addIndexedComponent(txtOwner);
        UISetting.policy.addIndexedComponent(txtOfficeAddress);
        UISetting.policy.addIndexedComponent(txtNatureBusiness);
        UISetting.policy.addIndexedComponent(txtYearOfOperation);
        UISetting.policy.addIndexedComponent(txtContact);
        UISetting.policy.addIndexedComponent(txtTIN);
        UISetting.policy.addIndexedComponent(txtEmail);
        UISetting.policy.addIndexedComponent(txtBussPermitNo);
        UISetting.policy.addIndexedComponent(txtIssuedOn);
        UISetting.policy.addIndexedComponent(txtExpireOn);
    }

    private void initKeyListener() {
        txtOwner.addKeyListener(this);
        txtOfficeAddress.addKeyListener(this);
        txtNatureBusiness.addKeyListener(this);
        txtYearOfOperation.addKeyListener(this);
        txtContact.addKeyListener(this);
        txtTIN.addKeyListener(this);
        txtEmail.addKeyListener(this);
        txtBussPermitNo.addKeyListener(this);
        txtIssuedOn.addKeyListener(this);
        txtExpireOn.addKeyListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtOwner = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtOfficeAddress = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtNatureBusiness = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtYearOfOperation = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtContact = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtTIN = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtBussPermitNo = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        try {
            txtIssuedOn = new com.vg.commons.formattedfields.FormattedSimpleDateField();
        } catch (java.text.ParseException e1) {
            e1.printStackTrace();
        }
        try {
            txtExpireOn = new com.vg.commons.formattedfields.FormattedSimpleDateField();
        } catch (java.text.ParseException e1) {
            e1.printStackTrace();
        }

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Owner/President");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 10, -1, -1));

        txtOwner.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtOwnerFocusLost(evt);
            }
        });
        add(txtOwner, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 5, 535, -1));

        jLabel2.setText("Office Address");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 35, -1, -1));

        txtOfficeAddress.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtOfficeAddressFocusLost(evt);
            }
        });
        add(txtOfficeAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 30, 535, -1));

        jLabel3.setText("Nature of Buss.");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 60, -1, -1));

        txtNatureBusiness.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNatureBusinessFocusLost(evt);
            }
        });
        add(txtNatureBusiness, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 55, 255, -1));

        jLabel4.setText("Years of Operation");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 60, -1, -1));

        txtYearOfOperation.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtYearOfOperationFocusLost(evt);
            }
        });
        add(txtYearOfOperation, new org.netbeans.lib.awtextra.AbsoluteConstraints(515, 55, 145, -1));

        jLabel5.setText("Contact #");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 85, -1, -1));

        txtContact.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtContactFocusLost(evt);
            }
        });
        add(txtContact, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 80, 120, -1));

        jLabel6.setText("T.I.N.");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 85, -1, -1));

        txtTIN.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtTINFocusLost(evt);
            }
        });
        add(txtTIN, new org.netbeans.lib.awtextra.AbsoluteConstraints(295, 80, 140, -1));

        jLabel7.setText("E-mail");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 85, -1, -1));

        txtEmail.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEmailFocusLost(evt);
            }
        });
        add(txtEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 80, 170, -1));

        jLabel8.setText("Buss. Permit #");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 110, -1, -1));

        txtBussPermitNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBussPermitNoFocusLost(evt);
            }
        });
        add(txtBussPermitNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 105, 150, -1));

        jLabel9.setText("Issued on");
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 110, -1, -1));

        jLabel10.setText("Expires On");
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 110, -1, -1));

        txtIssuedOn.setFont(new java.awt.Font("Monospaced", 0, 9)); // NOI18N
        add(txtIssuedOn, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 105, 110, -1));

        txtExpireOn.setFont(new java.awt.Font("Monospaced", 0, 9)); // NOI18N
        add(txtExpireOn, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 105, 110, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void txtEmailFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEmailFocusLost
        txtEmail.setText(UIValidator.validate(txtEmail));
    }//GEN-LAST:event_txtEmailFocusLost

    private void txtOwnerFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtOwnerFocusLost
        txtOwner.setText(txtOwner.getText().toUpperCase());
    }//GEN-LAST:event_txtOwnerFocusLost

    private void txtNatureBusinessFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNatureBusinessFocusLost
        txtNatureBusiness.setText(UIValidator.validate(txtNatureBusiness));
    }//GEN-LAST:event_txtNatureBusinessFocusLost

    private void txtYearOfOperationFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtYearOfOperationFocusLost
        txtYearOfOperation.setText(UIValidator.isNumeric(txtYearOfOperation));
    }//GEN-LAST:event_txtYearOfOperationFocusLost

    private void txtContactFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtContactFocusLost
        txtContact.setText(UIValidator.isNumeric(txtContact));
    }//GEN-LAST:event_txtContactFocusLost

    private void txtTINFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTINFocusLost
        txtTIN.setText(UIValidator.isNumeric(txtTIN));
    }//GEN-LAST:event_txtTINFocusLost

    private void txtBussPermitNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBussPermitNoFocusLost
        txtBussPermitNo.setText(UIValidator.isNumeric(txtBussPermitNo));
    }//GEN-LAST:event_txtBussPermitNoFocusLost

    private void txtOfficeAddressFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtOfficeAddressFocusLost
        txtOfficeAddress.setText(UIValidator.validate(txtOfficeAddress));
    }//GEN-LAST:event_txtOfficeAddressFocusLost

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField txtBussPermitNo;
    private javax.swing.JTextField txtContact;
    private javax.swing.JTextField txtEmail;
    private com.vg.commons.formattedfields.FormattedSimpleDateField txtExpireOn;
    private com.vg.commons.formattedfields.FormattedSimpleDateField txtIssuedOn;
    private javax.swing.JTextField txtNatureBusiness;
    private javax.swing.JTextField txtOfficeAddress;
    private javax.swing.JTextField txtOwner;
    private javax.swing.JTextField txtTIN;
    private javax.swing.JTextField txtYearOfOperation;
    // End of variables declaration//GEN-END:variables
    private HeaderPanel headerPanel;
    private JTextField txtCompanyName;
    private Company company;
    private Address address;
    private InstitutionalPanel institutionalPanel;
    private AddEditButtonPanel buttonPanel;

    public void setButtonPanel(AddEditButtonPanel buttonPanel) {
        this.buttonPanel = buttonPanel;
    }

    public Company getCompany() {
        return company;
    }

    public void setInstitutionalPanel(InstitutionalPanel institutionalPanel) {
        this.institutionalPanel = institutionalPanel;
    }

    public void setAddress(Address address) {
        this.address = address;
    }

    public void setTxtCompanyName(JTextField txtCompanyName) {
        this.txtCompanyName = txtCompanyName;
    }

    public void setCompany(Company company) {
        this.company = company;
        setCompanyInfo(this.company);
    }

    public void setHeaderPanel(HeaderPanel headerPanel) {
        this.headerPanel = headerPanel;
    }

    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {
        switch (e.getKeyCode()) {
            case KeyEvent.VK_ENTER:
                if (txtExpireOn.isFocusOwner()) {
                if (buttonPanel.getBtnAdd().getText().equals("Save")) {
                    buttonPanel.getBtnAdd().requestFocus();
                } else {
                    buttonPanel.getBtnEdit().requestFocus();
                }
            }
                break;
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
        switch (e.getKeyCode()) {
            case KeyEvent.VK_ENTER:
                if (txtOwner.isFocusOwner()) {
                txtOfficeAddress.requestFocus();
            } else if (txtOfficeAddress.isFocusOwner()) {
                txtNatureBusiness.requestFocus();
            } else if (txtNatureBusiness.isFocusOwner()) {
                txtYearOfOperation.requestFocus();
            } else if (txtYearOfOperation.isFocusOwner()) {
                txtContact.requestFocus();
            } else if (txtContact.isFocusOwner()) {
                txtTIN.requestFocus();
            } else if (txtTIN.isFocusOwner()) {
                txtEmail.requestFocus();
            } else if (txtEmail.isFocusOwner()) {
                txtBussPermitNo.requestFocus();
            } else if (txtBussPermitNo.isFocusOwner()) {
                txtIssuedOn.requestFocus();
            } else if (txtIssuedOn.isFocusOwner()) {
                txtExpireOn.requestFocus();
            } else if (txtExpireOn.isFocusOwner()) {
                if (buttonPanel.getBtnAdd().getText().equals("Save")) {
                    buttonPanel.getBtnAdd().requestFocus();
                } else {
                    buttonPanel.getBtnEdit().requestFocus();
                }
            }
                break;
            case KeyEvent.VK_UP:
                if (txtExpireOn.isFocusOwner()) {
                txtIssuedOn.requestFocus();
            } else if (txtIssuedOn.isFocusOwner()) {
                txtBussPermitNo.requestFocus();
            } else if (txtBussPermitNo.isFocusOwner()) {
                txtEmail.requestFocus();
            } else if (txtEmail.isFocusOwner()) {
                txtTIN.requestFocus();
            } else if (txtTIN.isFocusOwner()) {
                txtContact.requestFocus();
            } else if (txtContact.isFocusOwner()) {
                txtYearOfOperation.requestFocus();
            } else if (txtYearOfOperation.isFocusOwner()) {
                txtNatureBusiness.requestFocus();
            } else if (txtNatureBusiness.isFocusOwner()) {
                txtOfficeAddress.requestFocus();
            } else if (txtOfficeAddress.isFocusOwner()) {
                txtOwner.requestFocus();
            }
                break;
        }
    }

    public void setFieldsEditable(boolean value) {
        txtOwner.setEditable(value);
        txtOfficeAddress.setEditable(value);
        txtNatureBusiness.setEditable(value);
        txtYearOfOperation.setEditable(value);
        txtTIN.setEditable(value);
        txtBussPermitNo.setEditable(value);
        txtContact.setEditable(value);
        txtEmail.setEditable(value);
        txtIssuedOn.setEditable(value);
        txtExpireOn.setEditable(value);

        txtOwner.setFocusable(value);
        txtOfficeAddress.setFocusable(value);
        txtNatureBusiness.setFocusable(value);
        txtYearOfOperation.setFocusable(value);
        txtTIN.setFocusable(value);
        txtBussPermitNo.setFocusable(value);
        txtContact.setFocusable(value);
        txtEmail.setFocusable(value);
        txtIssuedOn.setFocusable(value);
        txtExpireOn.setFocusable(value);

        if (value) {
            txtOwner.requestFocus();
        }
    }

    public void resetToDefault() {
        txtOwner.setText("");
        txtOfficeAddress.setText("");
        txtNatureBusiness.setText("");
        txtYearOfOperation.setText("");
        txtTIN.setText("");
        txtBussPermitNo.setText("");
        txtContact.setText("");
        txtEmail.setText("");
        txtIssuedOn.setDate(new Date());
        txtExpireOn.setDate(new Date());
    }

    public void setCompanyInfo(Object o) {
        if (o == null) {
            resetToDefault();
        } else {
            Company c = (Company) o;
            txtOwner.setText(c.getPresident());
            txtOfficeAddress.setText(c.getAddress());
            txtNatureBusiness.setText(c.getNatureOfBusiness());
            txtYearOfOperation.setText(c.getYearOfService() + "");
            txtTIN.setText(c.getTin());
            txtBussPermitNo.setText(c.getBusinessPermitNo());
            txtContact.setText(c.getContactNo());
            txtEmail.setText(c.getEmail());
            txtIssuedOn.setDate(c.getIssuedDate());
            txtExpireOn.setDate(c.getExpirationDate());
            Customer cust = SearchController.getInstance().findByFormNo(c.getTxFormNo());
            if (cust != null) {
                institutionalPanel.fillValue(cust.getName(), address);
            }
            TransactionForm tf = FormController.getInstance().findByFormNo(c.getTxFormNo());
            if (tf != null) {
                headerPanel.setFormNo(tf.getTxFormNo());
                headerPanel.setIDNo(tf.getFormNo());
                headerPanel.setApplicationDate(tf.getTxApplicationDate());
            }
        }
    }

    public int saveCompanyInformation() {
//        Company c = CompanyController.getInstance().createNew(createNew(new Company()), headerPanel.getIDNo(), headerPanel.getApplicationDate(), txtCompanyName.getText());
        Company c = createNew(new Company());
        if (!validCompany(c)) {
            return ProcessValidator.VALIDATE_ERROR;
        }
        c = CompanyController.getInstance().createNew(c, headerPanel.getIDNo(), headerPanel.getApplicationDate(), txtCompanyName.getText());
        address.setAddressType("PRESENT");
        address.setTxFormNo(c.getTxFormNo());
        List<Address> a = AddressController.getInstance().save(c.getTxFormNo(), "APP", address);
        if (!a.isEmpty()) {
            setAddress(a.get(0));
        }
        headerPanel.setFormNo(c.getTxFormNo());
        setCompany(c);
        return (c != null ? ProcessValidator.PROCESS_COMPLETED : ProcessValidator.PROCESS_FAILED);
    }

    public int updateCompanyInformation() {
//        Company c = CompanyController.getInstance().update(createNew(company));
        Company c = createNew(company);
        if (!validCompany(c)) {
            return ProcessValidator.VALIDATE_ERROR;
        }
        c = CompanyController.getInstance().update(c);
        setCompany(c);
        return (c != null ? ProcessValidator.PROCESS_COMPLETED : ProcessValidator.PROCESS_FAILED);
    }

    private Company createNew(Company c) {
        c.setPresident(txtOwner.getText());
        c.setAddress(txtOfficeAddress.getText());
        c.setNatureOfBusiness(txtNatureBusiness.getText());
        if (txtYearOfOperation.getText().equals("")) {
            c.setYearOfService(0);
        } else {
            c.setYearOfService(Integer.parseInt(txtYearOfOperation.getText()));
        }
        c.setContactNo(txtContact.getText());
        c.setTin(txtTIN.getText());
        c.setEmail(txtEmail.getText());
        c.setBusinessPermitNo(txtBussPermitNo.getText());
        try {
            c.setIssuedDate(txtIssuedOn.getDate());
            c.setExpirationDate(txtExpireOn.getDate());
        } catch (ParseException ex) {
            UIValidator.log(ex, CompanyPanel.class);
        }
        return c;
    }

    private boolean validCompany(Company c) {
        if (c != null) {
            if (!UIValidator.validate(txtOwner, "Owner/President is required.")) {
                return false;
            }
            if (!UIValidator.validate(txtNatureBusiness, "Nature of Business is required.")) {
                return false;
            }
            if (!UIValidator.validate(txtYearOfOperation, "Years of Operation is required.")) {
                return false;
            }
            if (!UIValidator.validate(txtContact, "Contact # is required.")) {
                return false;
            }
            return true;
        } else {
            return false;
        }
    }
}
