/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.vg.scfc.financing.cis.ui.reusable;

import com.vg.scfc.financing.cis.ent.Sibling;
import com.vg.scfc.financing.cis.ui.controller.SiblingController;
import com.vg.scfc.financing.cis.ui.validator.UIValidator;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.List;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author rodel
 */
public class SiblingsPanel extends javax.swing.JPanel implements KeyListener {

    /**
     * Creates new form SiblingsPanel
     */
    public SiblingsPanel() {
        initComponents();
        startUpSettings();
    }

    private void initTableSibling() {
        if (tableSibling != null) {
            tableSibling.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            tableSibling.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

                @Override
                public void valueChanged(ListSelectionEvent lse) {
                    try {
                        selectedIndex = tableSibling.getSelectedRow();
                        if (selectedIndex >= 0) {
                            setSibling(siblings.get(selectedIndex));
                        }
                    } catch (Exception e) {
                        UIValidator.log(e, SiblingsPanel.class);
                    }
                }
            });
        }
    }

    private void startUpSettings() {
        setFieldsEditable(false);
        initTextBoxesListener();
        initTableSibling();
    }

    /**
     * Set TextBox Listener
     */
    private void initTextBoxesListener() {
        txtSiblingName.addKeyListener(this);
        txtSiblingAddress.addKeyListener(this);
        txtSiblingContact.addKeyListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtSiblingName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtSiblingAddress = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtSiblingContact = new javax.swing.JTextField();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel1.setText("Name");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 10, -1, -1));

        txtSiblingName.setFont(new java.awt.Font("Monospaced", 0, 9)); // NOI18N
        txtSiblingName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSiblingNameFocusLost(evt);
            }
        });
        add(txtSiblingName, new org.netbeans.lib.awtextra.AbsoluteConstraints(93, 5, 255, -1));

        jLabel2.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel2.setText("Address");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 35, -1, -1));

        txtSiblingAddress.setFont(new java.awt.Font("Monospaced", 0, 9)); // NOI18N
        txtSiblingAddress.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSiblingAddressFocusLost(evt);
            }
        });
        add(txtSiblingAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(93, 30, 255, -1));

        jLabel3.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel3.setText("Contact");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 60, -1, -1));

        txtSiblingContact.setFont(new java.awt.Font("Monospaced", 0, 9)); // NOI18N
        txtSiblingContact.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSiblingContactFocusLost(evt);
            }
        });
        add(txtSiblingContact, new org.netbeans.lib.awtextra.AbsoluteConstraints(93, 55, 140, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void txtSiblingNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSiblingNameFocusLost
        name = UIValidator.validate(txtSiblingName);
    }//GEN-LAST:event_txtSiblingNameFocusLost

    private void txtSiblingAddressFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSiblingAddressFocusLost
        address = UIValidator.validate(txtSiblingAddress);
    }//GEN-LAST:event_txtSiblingAddressFocusLost

    private void txtSiblingContactFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSiblingContactFocusLost
        contact = UIValidator.isNumeric(txtSiblingContact);
    }//GEN-LAST:event_txtSiblingContactFocusLost

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField txtSiblingAddress;
    private javax.swing.JTextField txtSiblingContact;
    private javax.swing.JTextField txtSiblingName;
    // End of variables declaration//GEN-END:variables
    private String name;
    private String address;
    private String contact;
    private JTable tableSibling;
    private int selectedIndex;
    private List<Sibling> siblings;
    private String formNo;
    private Sibling sibling;

    public void setSibling(Sibling sibling) {
        this.sibling = sibling;
        setSibling(this.sibling);
    }

    public void setFormNo(String formNo) {
        this.formNo = formNo;
    }

    public void setTableSibling(JTable tableSibling) {
        this.tableSibling = tableSibling;
    }

    public void setSiblings(List<Sibling> siblings) {
        this.siblings = siblings;
    }

    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {
    }

    @Override
    public void keyReleased(KeyEvent e) {
        switch (e.getKeyCode()) {
            case KeyEvent.VK_ENTER:
                if (txtSiblingName.isFocusOwner()) {
                txtSiblingAddress.requestFocus();
            } else if (txtSiblingAddress.isFocusOwner()) {
                txtSiblingContact.requestFocus();
            }
                break;
            case KeyEvent.VK_UP:
                if (txtSiblingContact.isFocusOwner()) {
                txtSiblingAddress.requestFocus();
            } else if (txtSiblingAddress.isFocusOwner()) {
                txtSiblingName.requestFocus();
            }
                break;
        }
    }

    public void setFieldsEditable(boolean value) {
        txtSiblingName.setEditable(value);
        txtSiblingAddress.setEditable(value);
        txtSiblingContact.setEditable(value);
    }

    public void resetToDefault() {
        txtSiblingName.setText("");
        txtSiblingAddress.setText("");
        txtSiblingContact.setText("");
    }

    public void setSiblingInfo(Object o) {
        if (o == null) {
            resetToDefault();
        } else {
            Sibling s = (Sibling) o;
            txtSiblingName.setText(s.getSiblingName());
            txtSiblingAddress.setText(s.getSiblingAddress());
            txtSiblingContact.setText(s.getSiblingContactNo());
        }
    }

    public boolean saveSibling() {
        Object o = SiblingController.getInstance().createNew(name, address, contact, formNo);
        setSibling((Sibling) o);
        return o != null;
    }

    public boolean updateSibling() {
        Object o = SiblingController.getInstance().update(formNo, sibling);
        setSibling((Sibling) o);
        return o != null;
    }

    public void refreshTable(List<Sibling> s) {
        siblings.clear();
        siblings.addAll(s);
        if (!siblings.isEmpty()) {
            tableSibling.setRowSelectionInterval(0, 0);
        }
    }
}
