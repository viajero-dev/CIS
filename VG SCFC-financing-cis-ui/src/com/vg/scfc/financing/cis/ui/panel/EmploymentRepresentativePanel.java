/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.vg.scfc.financing.cis.ui.panel;

import com.vg.commons.util.NumberUtils;
import com.vg.scfc.financing.cis.ent.RepresentativeEmployment;
import com.vg.scfc.financing.cis.ui.controller.EmploymentController;
import com.vg.scfc.financing.cis.ui.reusable.HeaderPanel;
import com.vg.scfc.financing.cis.ui.validator.UIValidator;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.math.BigDecimal;

/**
 *
 * @author rodel
 */
public class EmploymentRepresentativePanel extends javax.swing.JPanel implements KeyListener {

    /**
     * Creates new form EmploymentRepresentativePanel
     */
    public EmploymentRepresentativePanel() {
        initComponents();
        initKeyListener();
    }

    private void initKeyListener() {
        comboEmploymentStatus.addKeyListener(this);
        txtPosition.addKeyListener(this);
        txtDepartment.addKeyListener(this);
        txtYearInService.addKeyListener(this);
        txtMonthlyCompensation.addKeyListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        comboEmploymentStatus = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        txtPosition = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtDepartment = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtYearInService = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtMonthlyCompensation = new javax.swing.JTextField();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setText("Status");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 10, -1, -1));

        comboEmploymentStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "REGULAR", "SELF-EMPLOYED", "PROJECT HIRED", "CONTRACTUAL", "PROBATIONARY", "OTHERS" }));
        comboEmploymentStatus.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboEmploymentStatusItemStateChanged(evt);
            }
        });
        add(comboEmploymentStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 5, 144, -1));

        jLabel4.setText("Position");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 35, -1, -1));

        txtPosition.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPositionFocusLost(evt);
            }
        });
        add(txtPosition, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 30, 140, -1));

        jLabel5.setText("Department");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 60, -1, -1));

        txtDepartment.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDepartmentFocusLost(evt);
            }
        });
        add(txtDepartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 55, 320, -1));

        jLabel8.setText("Years in Service");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(295, 35, -1, -1));

        txtYearInService.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtYearInServiceFocusLost(evt);
            }
        });
        add(txtYearInService, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 30, 70, -1));

        jLabel2.setText("Monthly Salary Compensation");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 85, -1, -1));

        txtMonthlyCompensation.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMonthlyCompensationFocusLost(evt);
            }
        });
        add(txtMonthlyCompensation, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 80, 270, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void comboEmploymentStatusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboEmploymentStatusItemStateChanged
        switch (comboEmploymentStatus.getSelectedIndex()) {
            case 0:
                status = "REGULAR";
                break;
            case 1:
                status = "SELF-EMPLOYED";
                break;
            case 2:
                status = "PROJECT-HIRED";
                break;
            case 3:
                status = "CONTRACTUAL";
                break;
            case 4:
                status = "PROBITIONARY";
                break;
            case 5:
                status = "OTHERS";
                break;
        }
    }//GEN-LAST:event_comboEmploymentStatusItemStateChanged

    private void txtPositionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPositionFocusLost
        txtPosition.setText(UIValidator.validate(txtPosition));
    }//GEN-LAST:event_txtPositionFocusLost

    private void txtYearInServiceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtYearInServiceFocusLost
        txtYearInService.setText(UIValidator.isNumeric(txtYearInService));
    }//GEN-LAST:event_txtYearInServiceFocusLost

    private void txtDepartmentFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDepartmentFocusLost
        txtDepartment.setText(UIValidator.validate(txtDepartment));
    }//GEN-LAST:event_txtDepartmentFocusLost

    private void txtMonthlyCompensationFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMonthlyCompensationFocusLost
        txtMonthlyCompensation.setText((txtMonthlyCompensation.getText().equals("") ? "0.00" : NumberUtils.doubleToString(new BigDecimal(UIValidator.isNumeric(txtMonthlyCompensation)).doubleValue())));
    }//GEN-LAST:event_txtMonthlyCompensationFocusLost

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox comboEmploymentStatus;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JTextField txtDepartment;
    private javax.swing.JTextField txtMonthlyCompensation;
    private javax.swing.JTextField txtPosition;
    private javax.swing.JTextField txtYearInService;
    // End of variables declaration//GEN-END:variables
    private String status;
    private String position;
    private String department;
    private int yearInService;
    private BigDecimal monthlySalaryCompensation;
    private HeaderPanel headerPanel;
    private String personType;
    private RepresentativeEmployment representativeEmployment;

    public void setRepresentativeEmployment(RepresentativeEmployment representativeEmployment) {
        this.representativeEmployment = representativeEmployment;
        setEmployment(this.representativeEmployment);
    }

    public void setHeaderPanel(HeaderPanel headerPanel) {
        this.headerPanel = headerPanel;
    }

    public void setPersonType(String personType) {
        this.personType = personType;
    }

    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {
    }

    @Override
    public void keyReleased(KeyEvent e) {
        switch (e.getKeyCode()) {
            case KeyEvent.VK_ENTER:
                if (comboEmploymentStatus.isFocusOwner()) {
                txtPosition.requestFocus();
            } else if (txtPosition.isFocusOwner()) {
                txtYearInService.requestFocus();
            } else if (txtYearInService.isFocusOwner()) {
                txtDepartment.requestFocus();
            } else if (txtDepartment.isFocusOwner()) {
                txtMonthlyCompensation.requestFocus();
            }
                break;
            case KeyEvent.VK_UP:
                if (txtMonthlyCompensation.isFocusOwner()) {
                txtDepartment.requestFocus();
            } else if (txtDepartment.isFocusOwner()) {
                txtYearInService.requestFocus();
            }
                if (txtYearInService.isFocusOwner()) {
                    txtPosition.requestFocus();
                }
                if (txtPosition.isFocusOwner()) {
                    comboEmploymentStatus.requestFocus();
                }
                break;
        }
    }

    public void setFieldsEditable(boolean value) {
        comboEmploymentStatus.setEnabled(value);
        txtPosition.setEditable(value);
        txtDepartment.setEditable(value);
        txtYearInService.setEditable(value);
        txtMonthlyCompensation.setEditable(value);

        comboEmploymentStatus.setFocusable(value);
        txtPosition.setFocusable(value);
        txtDepartment.setFocusable(value);
        txtYearInService.setFocusable(value);
        txtMonthlyCompensation.setFocusable(value);

        if (value) {
            comboEmploymentStatus.requestFocus();
        }
    }

    public void resetToDefault() {
        comboEmploymentStatus.setSelectedIndex(0);
        txtPosition.setText("");
        txtDepartment.setText("");
        txtYearInService.setText("");
        txtMonthlyCompensation.setText("");
    }

    public void setEmployment(Object o) {
        if (o == null) {
            resetToDefault();
        } else {
            RepresentativeEmployment r = (RepresentativeEmployment) o;
            comboEmploymentStatus.removeAllItems();
            comboEmploymentStatus.addItem(r.getStatus());
            txtPosition.setText(r.getPosition());
            txtDepartment.setText(r.getDepartment());
            txtYearInService.setText(r.getYearOfService() + "");
            txtMonthlyCompensation.setText(NumberUtils.doubleToString(r.getSalary()));
        }
    }

    public boolean saveEmployment() {
        RepresentativeEmployment r = EmploymentController.getInstance().save(headerPanel.getFormNo(), personType, create(new RepresentativeEmployment()));
        setRepresentativeEmployment(r);
        return r != null;
    }

    public boolean updateEmployment() {
        RepresentativeEmployment r = EmploymentController.getInstance().update(headerPanel.getFormNo(), create(representativeEmployment));
        setRepresentativeEmployment(r);
        return r != null;
    }

    private RepresentativeEmployment create(RepresentativeEmployment r) {
        r.setStatus((String) comboEmploymentStatus.getSelectedItem());
        r.setPosition(txtPosition.getText());
        r.setDepartment(txtDepartment.getText());
        if (txtYearInService.getText().equals("")) {
            r.setYearOfService(0);
        } else {
            r.setYearOfService(Integer.parseInt(txtYearInService.getText()));
        }
        if (txtMonthlyCompensation.getText().equals("")) {
            r.setSalary(0);
        } else {
            r.setSalary(new BigDecimal(UIValidator.MoneyCommaRemover(txtMonthlyCompensation.getText())).doubleValue());
        }
        return r;
    }
}
